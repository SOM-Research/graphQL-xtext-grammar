grammar es.unex.quercusseg.GraphqlXtext with org.eclipse.xtext.common.Terminals
hidden(WS, ML_COMMENT, SL_COMMENT, COMMA, COMMENT)

generate graphqlXtext "http://www.unex.es/quercusseg/GraphqlXtext"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

//Production rules
Document:
	defs+=Definition*;
	
Definition:
	OperationDefinition |
	FragmentDefinition	
	;

OperationDefinition:
	selection=SelectionSet |
	opType=OperationType (name=NAME)? ('(' varDefinitions+=VariableDefinition+ ')')? (directives+=Directive)* selectionSet=SelectionSet 	
;

OperationType:
	'query' | 'mutation'
;

SelectionSet: {SelectionSet}
	'{' (selections+=Selection)+ '}'
;

Selection:
	Field | FragmentSpread | InlineFragment 	
;

Field:
	(alias=Alias)? name=NAME (args=Arguments)? (directives+=Directive)* (selectionSet=SelectionSet)?
;

Alias: 
	name=NAME ':'
;

Arguments:
	{Arguments} '(' args+=Argument* ')'
;

Argument:
	name=NAME ':' value=Value
;

FragmentSpread:
	'...' fragName=FragmentName (directives+=Directive)*
;

InlineFragment:
	{InlineFragment} '...' (typeCondition=TypeCondition)? (directives+=Directive)* selectionSet=SelectionSet
;

FragmentDefinition:
	'fragment' fragName=FragmentName (typeCondition=TypeCondition)? (directives+=Directive)* selectionSet=SelectionSet
;

FragmentName:
	NAME //TODO: but not 'on'
;

TypeCondition:
	'on' NamedType	
;

Value: //TODO: parameter Const
	SingleValue | ComplexValue //condition added to solve different returned types for value attr
//	value=Variable |
//	value=IntValue |
//	value=FloatValue |
//	value=StringValue |
//	value=BOOLEANVALUE |
//	value=NULLVALUE |
//	value=EnumValue |
//	value=ListValue |
//	value=ObjectValue 
;

SingleValue:
	value=Variable |
	value=IntValue |
//	value=FloatValue |
	value=StringValue |
	value=BOOLEANVALUE |
	value=NULLVALUE |
	value=EnumValue
;

ComplexValue:
	value=ListValue |
	value=ObjectValue
;
	
EnumValue:
	NAME //TODO: but not 'true' or 'false' or 'null'
;

//TODO: parameter Const
ListValue:
	{ListValue} '[' values+=Value* ']'
;
	
//TODO: parameter Const
ObjectValue: 
	{ObjectValue} '{' fields+=ObjectField* '}'
;

ObjectField: //TODO: parameter Const
	name=NAME ':' value=Value
;
	
VariableDefinitions: // hidden(COMMA,WS): //TODO: review overriding of hidden symbols at grammar level
	{VariableDefinitions} '(' varDefinitions+=VariableDefinition* ')'
;

VariableDefinition: // hidden(COMMA,WS):
	'$' name=NAME ':' type=Type (defValue=DefaultValue)? 
;

Variable:
	'$' NAME
;

DefaultValue:
	'=' Value //TODO: parameter Const
;

Type:
//	NamedType | ListType | NonNullType
	name=NamedType (notNull?='!')? |
	list=ListType (notNull?='!')?
;

NamedType:
	NAME
;

ListType:
	'[' type=Type ']'
;

//NonNullType:
// NamedType '!' | 
// ListType  '!'
//;

//Directives:
//	directives+=Directive*
//;

Directive:
	'@' name=NAME (args+=Arguments)*
;

//Terminals and data types
terminal COMMA: ',' ;

terminal COMMENT: 
    '#' !('\n'|'\r')* ('\r'? '\n')?;
    
terminal BOOLEANVALUE: 'true' | 'false' ;

terminal NULLVALUE: 'null';

terminal DIGIT: ('0'..'9');

@Override 
terminal INT returns ecore::EInt: DIGIT+;

terminal NAME: 
    ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*; 

IntValue:
	DIGIT
//	IntegerPart
;

//IntegerPart returns ecore::EString:
//	INT 
////	(NegativeSign)? '0' |
////	(NegativeSign)? NONZERODIGIT INT 
//;
//
//NegativeSign: '-' ;
//
//FloatValue:
//	IntegerPart FractionalPart |
//	IntegerPart ExponentPart |
//	IntegerPart FractionalPart ExponentPart
//;
//
//FractionalPart:
//	'.' INT
//;
//
//ExponentPart:
//	ExponentIndicator Sign? INT
//;
//
//ExponentIndicator: //TODO: could be enum rule but then ExponentPart should assign the returned value
//	'e' | 'E'
//;
//
//Sign: //TODO: could be enum rule but then ExponentPart should assign the returned value
//	'+' | '-'
//;

StringValue:
	STRING
;