/**
 * generated by Xtext 2.10.0
 */
package oda.graphql.language.graphqlidl.util;

import oda.graphql.language.graphqlidl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see oda.graphql.language.graphqlidl.GraphqlidlPackage
 * @generated
 */
public class GraphqlidlAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GraphqlidlPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GraphqlidlAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = GraphqlidlPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GraphqlidlSwitch<Adapter> modelSwitch =
    new GraphqlidlSwitch<Adapter>()
    {
      @Override
      public Adapter caseGraphqlSchema(GraphqlSchema object)
      {
        return createGraphqlSchemaAdapter();
      }
      @Override
      public Adapter caseGraphqlSchemaDefinition(GraphqlSchemaDefinition object)
      {
        return createGraphqlSchemaDefinitionAdapter();
      }
      @Override
      public Adapter caseGraphqlRootQuery(GraphqlRootQuery object)
      {
        return createGraphqlRootQueryAdapter();
      }
      @Override
      public Adapter caseGraphqlTypeDefinition(GraphqlTypeDefinition object)
      {
        return createGraphqlTypeDefinitionAdapter();
      }
      @Override
      public Adapter caseGraphqlObjectTypeDefinition(GraphqlObjectTypeDefinition object)
      {
        return createGraphqlObjectTypeDefinitionAdapter();
      }
      @Override
      public Adapter caseGraphqlInterfaceTypeDefinition(GraphqlInterfaceTypeDefinition object)
      {
        return createGraphqlInterfaceTypeDefinitionAdapter();
      }
      @Override
      public Adapter caseGraphqlScalarTypeDefinition(GraphqlScalarTypeDefinition object)
      {
        return createGraphqlScalarTypeDefinitionAdapter();
      }
      @Override
      public Adapter caseGraphqlEmunTypeDefinition(GraphqlEmunTypeDefinition object)
      {
        return createGraphqlEmunTypeDefinitionAdapter();
      }
      @Override
      public Adapter caseGraphqlUnionTypeDefinition(GraphqlUnionTypeDefinition object)
      {
        return createGraphqlUnionTypeDefinitionAdapter();
      }
      @Override
      public Adapter caseGraphqlInputTypeDefinition(GraphqlInputTypeDefinition object)
      {
        return createGraphqlInputTypeDefinitionAdapter();
      }
      @Override
      public Adapter caseGraphqlInputField(GraphqlInputField object)
      {
        return createGraphqlInputFieldAdapter();
      }
      @Override
      public Adapter caseGraphqlField(GraphqlField object)
      {
        return createGraphqlFieldAdapter();
      }
      @Override
      public Adapter caseGraphqlType(GraphqlType object)
      {
        return createGraphqlTypeAdapter();
      }
      @Override
      public Adapter caseGraphqlNamedType(GraphqlNamedType object)
      {
        return createGraphqlNamedTypeAdapter();
      }
      @Override
      public Adapter caseGraphqlListType(GraphqlListType object)
      {
        return createGraphqlListTypeAdapter();
      }
      @Override
      public Adapter caseGraphqlInputType(GraphqlInputType object)
      {
        return createGraphqlInputTypeAdapter();
      }
      @Override
      public Adapter caseGraphqlListInputType(GraphqlListInputType object)
      {
        return createGraphqlListInputTypeAdapter();
      }
      @Override
      public Adapter caseArgument(Argument object)
      {
        return createArgumentAdapter();
      }
      @Override
      public Adapter caseGraphqlValue(GraphqlValue object)
      {
        return createGraphqlValueAdapter();
      }
      @Override
      public Adapter caseSingleValue(SingleValue object)
      {
        return createSingleValueAdapter();
      }
      @Override
      public Adapter caseComplexValue(ComplexValue object)
      {
        return createComplexValueAdapter();
      }
      @Override
      public Adapter caseEnumValue(EnumValue object)
      {
        return createEnumValueAdapter();
      }
      @Override
      public Adapter caseListValue(ListValue object)
      {
        return createListValueAdapter();
      }
      @Override
      public Adapter caseObjectValue(ObjectValue object)
      {
        return createObjectValueAdapter();
      }
      @Override
      public Adapter caseObjectField(ObjectField object)
      {
        return createObjectFieldAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlSchema <em>Graphql Schema</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlSchema
   * @generated
   */
  public Adapter createGraphqlSchemaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlSchemaDefinition <em>Graphql Schema Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlSchemaDefinition
   * @generated
   */
  public Adapter createGraphqlSchemaDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlRootQuery <em>Graphql Root Query</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlRootQuery
   * @generated
   */
  public Adapter createGraphqlRootQueryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlTypeDefinition <em>Graphql Type Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlTypeDefinition
   * @generated
   */
  public Adapter createGraphqlTypeDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlObjectTypeDefinition <em>Graphql Object Type Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlObjectTypeDefinition
   * @generated
   */
  public Adapter createGraphqlObjectTypeDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlInterfaceTypeDefinition <em>Graphql Interface Type Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlInterfaceTypeDefinition
   * @generated
   */
  public Adapter createGraphqlInterfaceTypeDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlScalarTypeDefinition <em>Graphql Scalar Type Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlScalarTypeDefinition
   * @generated
   */
  public Adapter createGraphqlScalarTypeDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlEmunTypeDefinition <em>Graphql Emun Type Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlEmunTypeDefinition
   * @generated
   */
  public Adapter createGraphqlEmunTypeDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlUnionTypeDefinition <em>Graphql Union Type Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlUnionTypeDefinition
   * @generated
   */
  public Adapter createGraphqlUnionTypeDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlInputTypeDefinition <em>Graphql Input Type Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlInputTypeDefinition
   * @generated
   */
  public Adapter createGraphqlInputTypeDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlInputField <em>Graphql Input Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlInputField
   * @generated
   */
  public Adapter createGraphqlInputFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlField <em>Graphql Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlField
   * @generated
   */
  public Adapter createGraphqlFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlType <em>Graphql Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlType
   * @generated
   */
  public Adapter createGraphqlTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlNamedType <em>Graphql Named Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlNamedType
   * @generated
   */
  public Adapter createGraphqlNamedTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlListType <em>Graphql List Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlListType
   * @generated
   */
  public Adapter createGraphqlListTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlInputType <em>Graphql Input Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlInputType
   * @generated
   */
  public Adapter createGraphqlInputTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlListInputType <em>Graphql List Input Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlListInputType
   * @generated
   */
  public Adapter createGraphqlListInputTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.Argument <em>Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.Argument
   * @generated
   */
  public Adapter createArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.GraphqlValue <em>Graphql Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.GraphqlValue
   * @generated
   */
  public Adapter createGraphqlValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.SingleValue <em>Single Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.SingleValue
   * @generated
   */
  public Adapter createSingleValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.ComplexValue <em>Complex Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.ComplexValue
   * @generated
   */
  public Adapter createComplexValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.EnumValue <em>Enum Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.EnumValue
   * @generated
   */
  public Adapter createEnumValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.ListValue <em>List Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.ListValue
   * @generated
   */
  public Adapter createListValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.ObjectValue <em>Object Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.ObjectValue
   * @generated
   */
  public Adapter createObjectValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link oda.graphql.language.graphqlidl.ObjectField <em>Object Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see oda.graphql.language.graphqlidl.ObjectField
   * @generated
   */
  public Adapter createObjectFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //GraphqlidlAdapterFactory
