/**
 * generated by Xtext 2.10.0
 */
package oda.graphql.language.graphqlidl.impl;

import java.util.Collection;

import oda.graphql.language.graphqlidl.GraphqlSchema;
import oda.graphql.language.graphqlidl.GraphqlSchemaDefinition;
import oda.graphql.language.graphqlidl.GraphqlTypeDefinition;
import oda.graphql.language.graphqlidl.GraphqlidlPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Graphql Schema</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link oda.graphql.language.graphqlidl.impl.GraphqlSchemaImpl#getSchema <em>Schema</em>}</li>
 *   <li>{@link oda.graphql.language.graphqlidl.impl.GraphqlSchemaImpl#getTypes <em>Types</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GraphqlSchemaImpl extends MinimalEObjectImpl.Container implements GraphqlSchema
{
  /**
   * The cached value of the '{@link #getSchema() <em>Schema</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSchema()
   * @generated
   * @ordered
   */
  protected GraphqlSchemaDefinition schema;

  /**
   * The cached value of the '{@link #getTypes() <em>Types</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypes()
   * @generated
   * @ordered
   */
  protected EList<GraphqlTypeDefinition> types;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GraphqlSchemaImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GraphqlidlPackage.Literals.GRAPHQL_SCHEMA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GraphqlSchemaDefinition getSchema()
  {
    return schema;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSchema(GraphqlSchemaDefinition newSchema, NotificationChain msgs)
  {
    GraphqlSchemaDefinition oldSchema = schema;
    schema = newSchema;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GraphqlidlPackage.GRAPHQL_SCHEMA__SCHEMA, oldSchema, newSchema);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSchema(GraphqlSchemaDefinition newSchema)
  {
    if (newSchema != schema)
    {
      NotificationChain msgs = null;
      if (schema != null)
        msgs = ((InternalEObject)schema).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GraphqlidlPackage.GRAPHQL_SCHEMA__SCHEMA, null, msgs);
      if (newSchema != null)
        msgs = ((InternalEObject)newSchema).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GraphqlidlPackage.GRAPHQL_SCHEMA__SCHEMA, null, msgs);
      msgs = basicSetSchema(newSchema, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GraphqlidlPackage.GRAPHQL_SCHEMA__SCHEMA, newSchema, newSchema));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<GraphqlTypeDefinition> getTypes()
  {
    if (types == null)
    {
      types = new EObjectContainmentEList<GraphqlTypeDefinition>(GraphqlTypeDefinition.class, this, GraphqlidlPackage.GRAPHQL_SCHEMA__TYPES);
    }
    return types;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GraphqlidlPackage.GRAPHQL_SCHEMA__SCHEMA:
        return basicSetSchema(null, msgs);
      case GraphqlidlPackage.GRAPHQL_SCHEMA__TYPES:
        return ((InternalEList<?>)getTypes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GraphqlidlPackage.GRAPHQL_SCHEMA__SCHEMA:
        return getSchema();
      case GraphqlidlPackage.GRAPHQL_SCHEMA__TYPES:
        return getTypes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GraphqlidlPackage.GRAPHQL_SCHEMA__SCHEMA:
        setSchema((GraphqlSchemaDefinition)newValue);
        return;
      case GraphqlidlPackage.GRAPHQL_SCHEMA__TYPES:
        getTypes().clear();
        getTypes().addAll((Collection<? extends GraphqlTypeDefinition>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GraphqlidlPackage.GRAPHQL_SCHEMA__SCHEMA:
        setSchema((GraphqlSchemaDefinition)null);
        return;
      case GraphqlidlPackage.GRAPHQL_SCHEMA__TYPES:
        getTypes().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GraphqlidlPackage.GRAPHQL_SCHEMA__SCHEMA:
        return schema != null;
      case GraphqlidlPackage.GRAPHQL_SCHEMA__TYPES:
        return types != null && !types.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //GraphqlSchemaImpl
