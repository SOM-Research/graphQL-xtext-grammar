/*
 * generated by Xtext 2.10.0
 */
grammar InternalGraphqlidl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package oda.graphql.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package oda.graphql.language.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import oda.graphql.language.services.GraphqlidlGrammarAccess;

}

@parser::members {

 	private GraphqlidlGrammarAccess grammarAccess;

    public InternalGraphqlidlParser(TokenStream input, GraphqlidlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "GraphqlSchema";
   	}

   	@Override
   	protected GraphqlidlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleGraphqlSchema
entryRuleGraphqlSchema returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlSchemaRule()); }
	iv_ruleGraphqlSchema=ruleGraphqlSchema
	{ $current=$iv_ruleGraphqlSchema.current; }
	EOF;

// Rule GraphqlSchema
ruleGraphqlSchema returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{ 
			  getUnorderedGroupHelper().enter(grammarAccess.getGraphqlSchemaAccess().getUnorderedGroup());
			}
			(
				(
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getGraphqlSchemaAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getGraphqlSchemaAccess().getUnorderedGroup(), 0);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getGraphqlSchemaAccess().getSchemaGraphqlSchemaDefinitionParserRuleCall_0_0());
								}
								lv_schema_1_0=ruleGraphqlSchemaDefinition
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getGraphqlSchemaRule());
									}
									set(
										$current,
										"schema",
										lv_schema_1_0,
										"oda.graphql.language.Graphqlidl.GraphqlSchemaDefinition");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getGraphqlSchemaAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getGraphqlSchemaAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getGraphqlSchemaAccess().getUnorderedGroup(), 1);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getGraphqlSchemaAccess().getTypesGraphqlTypeDefinitionParserRuleCall_1_0());
								}
								lv_types_2_0=ruleGraphqlTypeDefinition
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getGraphqlSchemaRule());
									}
									add(
										$current,
										"types",
										lv_types_2_0,
										"oda.graphql.language.Graphqlidl.GraphqlTypeDefinition");
									afterParserOrEnumRuleCall();
								}
							)
							))+
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getGraphqlSchemaAccess().getUnorderedGroup());
				}
			)
		)
				)+
				{getUnorderedGroupHelper().canLeave(grammarAccess.getGraphqlSchemaAccess().getUnorderedGroup())}?
			)
		)
			{ 
			  getUnorderedGroupHelper().leave(grammarAccess.getGraphqlSchemaAccess().getUnorderedGroup());
			}
	)
;

// Entry rule entryRuleGraphqlSchemaDefinition
entryRuleGraphqlSchemaDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlSchemaDefinitionRule()); }
	iv_ruleGraphqlSchemaDefinition=ruleGraphqlSchemaDefinition
	{ $current=$iv_ruleGraphqlSchemaDefinition.current; }
	EOF;

// Rule GraphqlSchemaDefinition
ruleGraphqlSchemaDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='schema'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getGraphqlSchemaDefinitionAccess().getNameSchemaKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGraphqlSchemaDefinitionRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "schema");
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getGraphqlSchemaDefinitionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphqlSchemaDefinitionAccess().getRootQueryGraphqlRootQueryParserRuleCall_2_0());
				}
				lv_rootQuery_2_0=ruleGraphqlRootQuery
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphqlSchemaDefinitionRule());
					}
					set(
						$current,
						"rootQuery",
						lv_rootQuery_2_0,
						"oda.graphql.language.Graphqlidl.GraphqlRootQuery");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='mutation'
			{
				newLeafNode(otherlv_3, grammarAccess.getGraphqlSchemaDefinitionAccess().getMutationKeyword_3_0());
			}
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getGraphqlSchemaDefinitionAccess().getColonKeyword_3_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGraphqlSchemaDefinitionRule());
						}
					}
					otherlv_5=RULE_NAME
					{
						newLeafNode(otherlv_5, grammarAccess.getGraphqlSchemaDefinitionAccess().getMutationGraphqlObjectTypeDefinitionCrossReference_3_2_0());
					}
				)
			)
		)?
		(
			otherlv_6='subscription'
			{
				newLeafNode(otherlv_6, grammarAccess.getGraphqlSchemaDefinitionAccess().getSubscriptionKeyword_4_0());
			}
			otherlv_7=':'
			{
				newLeafNode(otherlv_7, grammarAccess.getGraphqlSchemaDefinitionAccess().getColonKeyword_4_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGraphqlSchemaDefinitionRule());
						}
					}
					otherlv_8=RULE_NAME
					{
						newLeafNode(otherlv_8, grammarAccess.getGraphqlSchemaDefinitionAccess().getSubcriptionGraphqlObjectTypeDefinitionCrossReference_4_2_0());
					}
				)
			)
		)?
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getGraphqlSchemaDefinitionAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleGraphqlRootQuery
entryRuleGraphqlRootQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlRootQueryRule()); }
	iv_ruleGraphqlRootQuery=ruleGraphqlRootQuery
	{ $current=$iv_ruleGraphqlRootQuery.current; }
	EOF;

// Rule GraphqlRootQuery
ruleGraphqlRootQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0='query'
				{
					newLeafNode(lv_name_0_0, grammarAccess.getGraphqlRootQueryAccess().getNameQueryKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGraphqlRootQueryRule());
					}
					setWithLastConsumed($current, "name", lv_name_0_0, "query");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getGraphqlRootQueryAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGraphqlRootQueryRule());
					}
				}
				otherlv_2=RULE_NAME
				{
					newLeafNode(otherlv_2, grammarAccess.getGraphqlRootQueryAccess().getQueryGraphqlObjectTypeDefinitionCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleGraphqlTypeDefinition
entryRuleGraphqlTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlTypeDefinitionRule()); }
	iv_ruleGraphqlTypeDefinition=ruleGraphqlTypeDefinition
	{ $current=$iv_ruleGraphqlTypeDefinition.current; }
	EOF;

// Rule GraphqlTypeDefinition
ruleGraphqlTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGraphqlTypeDefinitionAccess().getGraphqlObjectTypeDefinitionParserRuleCall_0());
		}
		this_GraphqlObjectTypeDefinition_0=ruleGraphqlObjectTypeDefinition
		{
			$current = $this_GraphqlObjectTypeDefinition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGraphqlTypeDefinitionAccess().getGraphqlScalarTypeDefinitionParserRuleCall_1());
		}
		this_GraphqlScalarTypeDefinition_1=ruleGraphqlScalarTypeDefinition
		{
			$current = $this_GraphqlScalarTypeDefinition_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGraphqlTypeDefinitionAccess().getGraphqlInterfaceTypeDefinitionParserRuleCall_2());
		}
		this_GraphqlInterfaceTypeDefinition_2=ruleGraphqlInterfaceTypeDefinition
		{
			$current = $this_GraphqlInterfaceTypeDefinition_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGraphqlTypeDefinitionAccess().getGraphqlUnionTypeDefinitionParserRuleCall_3());
		}
		this_GraphqlUnionTypeDefinition_3=ruleGraphqlUnionTypeDefinition
		{
			$current = $this_GraphqlUnionTypeDefinition_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGraphqlTypeDefinitionAccess().getGraphqlEmunTypeDefinitionParserRuleCall_4());
		}
		this_GraphqlEmunTypeDefinition_4=ruleGraphqlEmunTypeDefinition
		{
			$current = $this_GraphqlEmunTypeDefinition_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGraphqlTypeDefinitionAccess().getGraphqlInputTypeDefinitionParserRuleCall_5());
		}
		this_GraphqlInputTypeDefinition_5=ruleGraphqlInputTypeDefinition
		{
			$current = $this_GraphqlInputTypeDefinition_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleGraphqlObjectTypeDefinition
entryRuleGraphqlObjectTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlObjectTypeDefinitionRule()); }
	iv_ruleGraphqlObjectTypeDefinition=ruleGraphqlObjectTypeDefinition
	{ $current=$iv_ruleGraphqlObjectTypeDefinition.current; }
	EOF;

// Rule GraphqlObjectTypeDefinition
ruleGraphqlObjectTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getGraphqlObjectTypeDefinitionAccess().getTypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_NAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getGraphqlObjectTypeDefinitionAccess().getNameNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGraphqlObjectTypeDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"oda.graphql.language.Graphqlidl.NAME");
				}
			)
		)
		(
			otherlv_2='implements'
			{
				newLeafNode(otherlv_2, grammarAccess.getGraphqlObjectTypeDefinitionAccess().getImplementsKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGraphqlObjectTypeDefinitionRule());
						}
					}
					otherlv_3=RULE_NAME
					{
						newLeafNode(otherlv_3, grammarAccess.getGraphqlObjectTypeDefinitionAccess().getInterfacesGraphqlInterfaceTypeDefinitionCrossReference_2_1_0());
					}
				)
			)+
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getGraphqlObjectTypeDefinitionAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphqlObjectTypeDefinitionAccess().getFieldsGraphqlFieldParserRuleCall_4_0());
				}
				lv_fields_5_0=ruleGraphqlField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphqlObjectTypeDefinitionRule());
					}
					add(
						$current,
						"fields",
						lv_fields_5_0,
						"oda.graphql.language.Graphqlidl.GraphqlField");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getGraphqlObjectTypeDefinitionAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleGraphqlInterfaceTypeDefinition
entryRuleGraphqlInterfaceTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlInterfaceTypeDefinitionRule()); }
	iv_ruleGraphqlInterfaceTypeDefinition=ruleGraphqlInterfaceTypeDefinition
	{ $current=$iv_ruleGraphqlInterfaceTypeDefinition.current; }
	EOF;

// Rule GraphqlInterfaceTypeDefinition
ruleGraphqlInterfaceTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='interface'
		{
			newLeafNode(otherlv_0, grammarAccess.getGraphqlInterfaceTypeDefinitionAccess().getInterfaceKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_NAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getGraphqlInterfaceTypeDefinitionAccess().getNameNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGraphqlInterfaceTypeDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"oda.graphql.language.Graphqlidl.NAME");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getGraphqlInterfaceTypeDefinitionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphqlInterfaceTypeDefinitionAccess().getFieldsGraphqlFieldParserRuleCall_3_0());
				}
				lv_fields_3_0=ruleGraphqlField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphqlInterfaceTypeDefinitionRule());
					}
					add(
						$current,
						"fields",
						lv_fields_3_0,
						"oda.graphql.language.Graphqlidl.GraphqlField");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getGraphqlInterfaceTypeDefinitionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleGraphqlScalarTypeDefinition
entryRuleGraphqlScalarTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlScalarTypeDefinitionRule()); }
	iv_ruleGraphqlScalarTypeDefinition=ruleGraphqlScalarTypeDefinition
	{ $current=$iv_ruleGraphqlScalarTypeDefinition.current; }
	EOF;

// Rule GraphqlScalarTypeDefinition
ruleGraphqlScalarTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='scalar'
		{
			newLeafNode(otherlv_0, grammarAccess.getGraphqlScalarTypeDefinitionAccess().getScalarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_NAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getGraphqlScalarTypeDefinitionAccess().getNameNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGraphqlScalarTypeDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"oda.graphql.language.Graphqlidl.NAME");
				}
			)
		)
	)
;

// Entry rule entryRuleGraphqlEmunTypeDefinition
entryRuleGraphqlEmunTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlEmunTypeDefinitionRule()); }
	iv_ruleGraphqlEmunTypeDefinition=ruleGraphqlEmunTypeDefinition
	{ $current=$iv_ruleGraphqlEmunTypeDefinition.current; }
	EOF;

// Rule GraphqlEmunTypeDefinition
ruleGraphqlEmunTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='enum'
		{
			newLeafNode(otherlv_0, grammarAccess.getGraphqlEmunTypeDefinitionAccess().getEnumKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_NAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getGraphqlEmunTypeDefinitionAccess().getNameNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGraphqlEmunTypeDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"oda.graphql.language.Graphqlidl.NAME");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getGraphqlEmunTypeDefinitionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphqlEmunTypeDefinitionAccess().getValuesEnumValueParserRuleCall_3_0());
				}
				lv_values_3_0=ruleEnumValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphqlEmunTypeDefinitionRule());
					}
					add(
						$current,
						"values",
						lv_values_3_0,
						"oda.graphql.language.Graphqlidl.EnumValue");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getGraphqlEmunTypeDefinitionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleGraphqlUnionTypeDefinition
entryRuleGraphqlUnionTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlUnionTypeDefinitionRule()); }
	iv_ruleGraphqlUnionTypeDefinition=ruleGraphqlUnionTypeDefinition
	{ $current=$iv_ruleGraphqlUnionTypeDefinition.current; }
	EOF;

// Rule GraphqlUnionTypeDefinition
ruleGraphqlUnionTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='union'
		{
			newLeafNode(otherlv_0, grammarAccess.getGraphqlUnionTypeDefinitionAccess().getUnionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_NAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getGraphqlUnionTypeDefinitionAccess().getNameNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGraphqlUnionTypeDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"oda.graphql.language.Graphqlidl.NAME");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getGraphqlUnionTypeDefinitionAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGraphqlUnionTypeDefinitionRule());
					}
				}
				otherlv_3=RULE_NAME
				{
					newLeafNode(otherlv_3, grammarAccess.getGraphqlUnionTypeDefinitionAccess().getMembersGraphqlObjectTypeDefinitionCrossReference_3_0());
				}
			)
		)
		(
			otherlv_4='|'
			{
				newLeafNode(otherlv_4, grammarAccess.getGraphqlUnionTypeDefinitionAccess().getVerticalLineKeyword_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGraphqlUnionTypeDefinitionRule());
						}
					}
					otherlv_5=RULE_NAME
					{
						newLeafNode(otherlv_5, grammarAccess.getGraphqlUnionTypeDefinitionAccess().getMembersGraphqlObjectTypeDefinitionCrossReference_4_1_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleGraphqlInputTypeDefinition
entryRuleGraphqlInputTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlInputTypeDefinitionRule()); }
	iv_ruleGraphqlInputTypeDefinition=ruleGraphqlInputTypeDefinition
	{ $current=$iv_ruleGraphqlInputTypeDefinition.current; }
	EOF;

// Rule GraphqlInputTypeDefinition
ruleGraphqlInputTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='input'
		{
			newLeafNode(otherlv_0, grammarAccess.getGraphqlInputTypeDefinitionAccess().getInputKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_NAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getGraphqlInputTypeDefinitionAccess().getNameNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGraphqlInputTypeDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"oda.graphql.language.Graphqlidl.NAME");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getGraphqlInputTypeDefinitionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphqlInputTypeDefinitionAccess().getFieldsGraphqlInputFieldParserRuleCall_3_0());
				}
				lv_fields_3_0=ruleGraphqlInputField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphqlInputTypeDefinitionRule());
					}
					add(
						$current,
						"fields",
						lv_fields_3_0,
						"oda.graphql.language.Graphqlidl.GraphqlInputField");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getGraphqlInputTypeDefinitionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleGraphqlInputField
entryRuleGraphqlInputField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlInputFieldRule()); }
	iv_ruleGraphqlInputField=ruleGraphqlInputField
	{ $current=$iv_ruleGraphqlInputField.current; }
	EOF;

// Rule GraphqlInputField
ruleGraphqlInputField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_NAME
				{
					newLeafNode(lv_name_0_0, grammarAccess.getGraphqlInputFieldAccess().getNameNAMETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGraphqlInputFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"oda.graphql.language.Graphqlidl.NAME");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getGraphqlInputFieldAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphqlInputFieldAccess().getTypeGraphqlInputTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleGraphqlInputType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphqlInputFieldRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"oda.graphql.language.Graphqlidl.GraphqlInputType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGraphqlField
entryRuleGraphqlField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlFieldRule()); }
	iv_ruleGraphqlField=ruleGraphqlField
	{ $current=$iv_ruleGraphqlField.current; }
	EOF;

// Rule GraphqlField
ruleGraphqlField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_NAME
				{
					newLeafNode(lv_name_0_0, grammarAccess.getGraphqlFieldAccess().getNameNAMETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGraphqlFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"oda.graphql.language.Graphqlidl.NAME");
				}
			)
		)
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getGraphqlFieldAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGraphqlFieldAccess().getArgsArgumentParserRuleCall_1_1_0());
					}
					lv_args_2_0=ruleArgument
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGraphqlFieldRule());
						}
						add(
							$current,
							"args",
							lv_args_2_0,
							"oda.graphql.language.Graphqlidl.Argument");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=')'
			{
				newLeafNode(otherlv_3, grammarAccess.getGraphqlFieldAccess().getRightParenthesisKeyword_1_2());
			}
		)*
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getGraphqlFieldAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphqlFieldAccess().getTypeGraphqlTypeParserRuleCall_3_0());
				}
				lv_type_5_0=ruleGraphqlType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphqlFieldRule());
					}
					set(
						$current,
						"type",
						lv_type_5_0,
						"oda.graphql.language.Graphqlidl.GraphqlType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGraphqlType
entryRuleGraphqlType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlTypeRule()); }
	iv_ruleGraphqlType=ruleGraphqlType
	{ $current=$iv_ruleGraphqlType.current; }
	EOF;

// Rule GraphqlType
ruleGraphqlType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGraphqlTypeRule());
						}
					}
					otherlv_0=RULE_NAME
					{
						newLeafNode(otherlv_0, grammarAccess.getGraphqlTypeAccess().getDtypeGraphqlTypeDefinitionCrossReference_0_0_0());
					}
				)
			)
			(
				(
					lv_nonNull_1_0='!'
					{
						newLeafNode(lv_nonNull_1_0, grammarAccess.getGraphqlTypeAccess().getNonNullExclamationMarkKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGraphqlTypeRule());
						}
						setWithLastConsumed($current, "nonNull", true, "!");
					}
				)
			)?
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getGraphqlTypeAccess().getNtypeGraphqlNamedTypeParserRuleCall_1_0_0());
					}
					lv_ntype_2_0=ruleGraphqlNamedType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGraphqlTypeRule());
						}
						set(
							$current,
							"ntype",
							lv_ntype_2_0,
							"oda.graphql.language.Graphqlidl.GraphqlNamedType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_nonNull_3_0='!'
					{
						newLeafNode(lv_nonNull_3_0, grammarAccess.getGraphqlTypeAccess().getNonNullExclamationMarkKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGraphqlTypeRule());
						}
						setWithLastConsumed($current, "nonNull", true, "!");
					}
				)
			)?
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getGraphqlTypeAccess().getLtypeGraphqlListTypeParserRuleCall_2_0_0());
					}
					lv_ltype_4_0=ruleGraphqlListType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGraphqlTypeRule());
						}
						set(
							$current,
							"ltype",
							lv_ltype_4_0,
							"oda.graphql.language.Graphqlidl.GraphqlListType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_nonNull_5_0='!'
					{
						newLeafNode(lv_nonNull_5_0, grammarAccess.getGraphqlTypeAccess().getNonNullExclamationMarkKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGraphqlTypeRule());
						}
						setWithLastConsumed($current, "nonNull", true, "!");
					}
				)
			)?
		)
	)
;

// Entry rule entryRuleGraphqlNamedType
entryRuleGraphqlNamedType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlNamedTypeRule()); }
	iv_ruleGraphqlNamedType=ruleGraphqlNamedType
	{ $current=$iv_ruleGraphqlNamedType.current; }
	EOF;

// Rule GraphqlNamedType
ruleGraphqlNamedType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_SCALAR
			{
				newLeafNode(lv_name_0_0, grammarAccess.getGraphqlNamedTypeAccess().getNameSCALARTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getGraphqlNamedTypeRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"oda.graphql.language.Graphqlidl.SCALAR");
			}
		)
	)
;

// Entry rule entryRuleGraphqlListType
entryRuleGraphqlListType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlListTypeRule()); }
	iv_ruleGraphqlListType=ruleGraphqlListType
	{ $current=$iv_ruleGraphqlListType.current; }
	EOF;

// Rule GraphqlListType
ruleGraphqlListType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getGraphqlListTypeAccess().getLeftSquareBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getGraphqlListTypeAccess().getGraphqlTypeParserRuleCall_1());
		}
		this_GraphqlType_1=ruleGraphqlType
		{
			$current = $this_GraphqlType_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getGraphqlListTypeAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleGraphqlInputType
entryRuleGraphqlInputType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlInputTypeRule()); }
	iv_ruleGraphqlInputType=ruleGraphqlInputType
	{ $current=$iv_ruleGraphqlInputType.current; }
	EOF;

// Rule GraphqlInputType
ruleGraphqlInputType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGraphqlInputTypeRule());
						}
					}
					otherlv_0=RULE_NAME
					{
						newLeafNode(otherlv_0, grammarAccess.getGraphqlInputTypeAccess().getDtypeGraphqlInputTypeDefinitionCrossReference_0_0_0());
					}
				)
			)
			(
				(
					lv_nonNull_1_0='!'
					{
						newLeafNode(lv_nonNull_1_0, grammarAccess.getGraphqlInputTypeAccess().getNonNullExclamationMarkKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGraphqlInputTypeRule());
						}
						setWithLastConsumed($current, "nonNull", true, "!");
					}
				)
			)?
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getGraphqlInputTypeAccess().getNtypeGraphqlNamedTypeParserRuleCall_1_0_0());
					}
					lv_ntype_2_0=ruleGraphqlNamedType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGraphqlInputTypeRule());
						}
						set(
							$current,
							"ntype",
							lv_ntype_2_0,
							"oda.graphql.language.Graphqlidl.GraphqlNamedType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_nonNull_3_0='!'
					{
						newLeafNode(lv_nonNull_3_0, grammarAccess.getGraphqlInputTypeAccess().getNonNullExclamationMarkKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGraphqlInputTypeRule());
						}
						setWithLastConsumed($current, "nonNull", true, "!");
					}
				)
			)?
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getGraphqlInputTypeAccess().getLtypeGraphqlListInputTypeParserRuleCall_2_0_0());
					}
					lv_ltype_4_0=ruleGraphqlListInputType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGraphqlInputTypeRule());
						}
						set(
							$current,
							"ltype",
							lv_ltype_4_0,
							"oda.graphql.language.Graphqlidl.GraphqlListInputType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_nonNull_5_0='!'
					{
						newLeafNode(lv_nonNull_5_0, grammarAccess.getGraphqlInputTypeAccess().getNonNullExclamationMarkKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGraphqlInputTypeRule());
						}
						setWithLastConsumed($current, "nonNull", true, "!");
					}
				)
			)?
		)
	)
;

// Entry rule entryRuleGraphqlListInputType
entryRuleGraphqlListInputType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlListInputTypeRule()); }
	iv_ruleGraphqlListInputType=ruleGraphqlListInputType
	{ $current=$iv_ruleGraphqlListInputType.current; }
	EOF;

// Rule GraphqlListInputType
ruleGraphqlListInputType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getGraphqlListInputTypeAccess().getLeftSquareBracketKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getGraphqlListInputTypeAccess().getGraphqlInputTypeParserRuleCall_1());
		}
		this_GraphqlInputType_1=ruleGraphqlInputType
		{
			$current = $this_GraphqlInputType_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=']'
		{
			newLeafNode(otherlv_2, grammarAccess.getGraphqlListInputTypeAccess().getRightSquareBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleArgument
entryRuleArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentRule()); }
	iv_ruleArgument=ruleArgument
	{ $current=$iv_ruleArgument.current; }
	EOF;

// Rule Argument
ruleArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_NAME
				{
					newLeafNode(lv_name_0_0, grammarAccess.getArgumentAccess().getNameNAMETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArgumentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"oda.graphql.language.Graphqlidl.NAME");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getArgumentAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArgumentAccess().getTypeGraphqlTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleGraphqlType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArgumentRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"oda.graphql.language.Graphqlidl.GraphqlType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getArgumentAccess().getEqualsSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArgumentAccess().getDefValueGraphqlValueParserRuleCall_3_1_0());
					}
					lv_defValue_4_0=ruleGraphqlValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArgumentRule());
						}
						set(
							$current,
							"defValue",
							lv_defValue_4_0,
							"oda.graphql.language.Graphqlidl.GraphqlValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleGraphqlValue
entryRuleGraphqlValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGraphqlValueRule()); }
	iv_ruleGraphqlValue=ruleGraphqlValue
	{ $current=$iv_ruleGraphqlValue.current; }
	EOF;

// Rule GraphqlValue
ruleGraphqlValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphqlValueAccess().getSvSingleValueParserRuleCall_0_0());
				}
				lv_sv_0_0=ruleSingleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphqlValueRule());
					}
					set(
						$current,
						"sv",
						lv_sv_0_0,
						"oda.graphql.language.Graphqlidl.SingleValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGraphqlValueRule());
					}
				}
				otherlv_1=RULE_NAME
				{
					newLeafNode(otherlv_1, grammarAccess.getGraphqlValueAccess().getEvEnumValueCrossReference_1_0());
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getGraphqlValueAccess().getCvComplexValueParserRuleCall_2_0());
				}
				lv_cv_2_0=ruleComplexValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGraphqlValueRule());
					}
					set(
						$current,
						"cv",
						lv_cv_2_0,
						"oda.graphql.language.Graphqlidl.ComplexValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSingleValue
entryRuleSingleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleValueRule()); }
	iv_ruleSingleValue=ruleSingleValue
	{ $current=$iv_ruleSingleValue.current; }
	EOF;

// Rule SingleValue
ruleSingleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSingleValueAccess().getValueIntValueParserRuleCall_0_0());
				}
				lv_value_0_0=ruleIntValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSingleValueRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"oda.graphql.language.Graphqlidl.IntValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSingleValueAccess().getValueFloatValueParserRuleCall_1_0());
				}
				lv_value_1_0=ruleFloatValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSingleValueRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"oda.graphql.language.Graphqlidl.FloatValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSingleValueAccess().getValueStringValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSingleValueRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"oda.graphql.language.Graphqlidl.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_value_3_0=RULE_BOOLEANVALUE
				{
					newLeafNode(lv_value_3_0, grammarAccess.getSingleValueAccess().getValueBOOLEANVALUETerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleValueRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"oda.graphql.language.Graphqlidl.BOOLEANVALUE");
				}
			)
		)
		    |
		(
			(
				lv_value_4_0=RULE_NULLVALUE
				{
					newLeafNode(lv_value_4_0, grammarAccess.getSingleValueAccess().getValueNULLVALUETerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleValueRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_4_0,
						"oda.graphql.language.Graphqlidl.NULLVALUE");
				}
			)
		)
	)
;

// Entry rule entryRuleComplexValue
entryRuleComplexValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComplexValueRule()); }
	iv_ruleComplexValue=ruleComplexValue
	{ $current=$iv_ruleComplexValue.current; }
	EOF;

// Rule ComplexValue
ruleComplexValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getComplexValueAccess().getValueListValueParserRuleCall_0_0());
				}
				lv_value_0_0=ruleListValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComplexValueRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"oda.graphql.language.Graphqlidl.ListValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getComplexValueAccess().getValueObjectValueParserRuleCall_1_0());
				}
				lv_value_1_0=ruleObjectValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComplexValueRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"oda.graphql.language.Graphqlidl.ObjectValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEnumValue
entryRuleEnumValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumValueRule()); }
	iv_ruleEnumValue=ruleEnumValue
	{ $current=$iv_ruleEnumValue.current; }
	EOF;

// Rule EnumValue
ruleEnumValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEnumValueAccess().getEnumValueAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_ENUM_VALUE
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEnumValueAccess().getNameENUM_VALUETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumValueRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"oda.graphql.language.Graphqlidl.ENUM_VALUE");
				}
			)
		)
	)
;

// Entry rule entryRuleListValue
entryRuleListValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListValueRule()); }
	iv_ruleListValue=ruleListValue
	{ $current=$iv_ruleListValue.current; }
	EOF;

// Rule ListValue
ruleListValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getListValueAccess().getListValueAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getListValueAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListValueAccess().getValuesGraphqlValueParserRuleCall_2_0());
				}
				lv_values_2_0=ruleGraphqlValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListValueRule());
					}
					add(
						$current,
						"values",
						lv_values_2_0,
						"oda.graphql.language.Graphqlidl.GraphqlValue");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getListValueAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleObjectValue
entryRuleObjectValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectValueRule()); }
	iv_ruleObjectValue=ruleObjectValue
	{ $current=$iv_ruleObjectValue.current; }
	EOF;

// Rule ObjectValue
ruleObjectValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObjectValueAccess().getObjectValueAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getObjectValueAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectValueAccess().getFieldsObjectFieldParserRuleCall_2_0());
				}
				lv_fields_2_0=ruleObjectField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectValueRule());
					}
					add(
						$current,
						"fields",
						lv_fields_2_0,
						"oda.graphql.language.Graphqlidl.ObjectField");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getObjectValueAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleObjectField
entryRuleObjectField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectFieldRule()); }
	iv_ruleObjectField=ruleObjectField
	{ $current=$iv_ruleObjectField.current; }
	EOF;

// Rule ObjectField
ruleObjectField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_NAME
				{
					newLeafNode(lv_name_0_0, grammarAccess.getObjectFieldAccess().getNameNAMETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"oda.graphql.language.Graphqlidl.NAME");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getObjectFieldAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectFieldAccess().getValueGraphqlValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleGraphqlValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectFieldRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"oda.graphql.language.Graphqlidl.GraphqlValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIntValue
entryRuleIntValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntValueRule()); }
	iv_ruleIntValue=ruleIntValue
	{ $current=$iv_ruleIntValue.current.getText(); }
	EOF;

// Rule IntValue
ruleIntValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getIntValueAccess().getIntegerPartParserRuleCall());
	}
	this_IntegerPart_0=ruleIntegerPart
	{
		$current.merge(this_IntegerPart_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleIntegerPart
entryRuleIntegerPart returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntegerPartRule()); }
	iv_ruleIntegerPart=ruleIntegerPart
	{ $current=$iv_ruleIntegerPart.current.getText(); }
	EOF;

// Rule IntegerPart
ruleIntegerPart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIntegerPartAccess().getNegativeSignParserRuleCall_0_0());
				}
				this_NegativeSign_0=ruleNegativeSign
				{
					$current.merge(this_NegativeSign_0);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
			kw='0'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIntegerPartAccess().getDigitZeroKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getIntegerPartAccess().getNegativeSignParserRuleCall_1_0());
				}
				this_NegativeSign_2=ruleNegativeSign
				{
					$current.merge(this_NegativeSign_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
			this_NONZERODIGIT_3=RULE_NONZERODIGIT
			{
				$current.merge(this_NONZERODIGIT_3);
			}
			{
				newLeafNode(this_NONZERODIGIT_3, grammarAccess.getIntegerPartAccess().getNONZERODIGITTerminalRuleCall_1_1());
			}
			this_INT_4=RULE_INT
			{
				$current.merge(this_INT_4);
			}
			{
				newLeafNode(this_INT_4, grammarAccess.getIntegerPartAccess().getINTTerminalRuleCall_1_2());
			}
		)
	)
;

// Entry rule entryRuleNegativeSign
entryRuleNegativeSign returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNegativeSignRule()); }
	iv_ruleNegativeSign=ruleNegativeSign
	{ $current=$iv_ruleNegativeSign.current.getText(); }
	EOF;

// Rule NegativeSign
ruleNegativeSign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='-'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getNegativeSignAccess().getHyphenMinusKeyword());
	}
;

// Entry rule entryRuleFloatValue
entryRuleFloatValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloatValueRule()); }
	iv_ruleFloatValue=ruleFloatValue
	{ $current=$iv_ruleFloatValue.current.getText(); }
	EOF;

// Rule FloatValue
ruleFloatValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFloatValueAccess().getIntegerPartParserRuleCall_0_0());
			}
			this_IntegerPart_0=ruleIntegerPart
			{
				$current.merge(this_IntegerPart_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFloatValueAccess().getFractionalPartParserRuleCall_0_1());
			}
			this_FractionalPart_1=ruleFractionalPart
			{
				$current.merge(this_FractionalPart_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getFloatValueAccess().getIntegerPartParserRuleCall_1_0());
			}
			this_IntegerPart_2=ruleIntegerPart
			{
				$current.merge(this_IntegerPart_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFloatValueAccess().getExponentPartParserRuleCall_1_1());
			}
			this_ExponentPart_3=ruleExponentPart
			{
				$current.merge(this_ExponentPart_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getFloatValueAccess().getIntegerPartParserRuleCall_2_0());
			}
			this_IntegerPart_4=ruleIntegerPart
			{
				$current.merge(this_IntegerPart_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFloatValueAccess().getFractionalPartParserRuleCall_2_1());
			}
			this_FractionalPart_5=ruleFractionalPart
			{
				$current.merge(this_FractionalPart_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getFloatValueAccess().getExponentPartParserRuleCall_2_2());
			}
			this_ExponentPart_6=ruleExponentPart
			{
				$current.merge(this_ExponentPart_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleFractionalPart
entryRuleFractionalPart returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFractionalPartRule()); }
	iv_ruleFractionalPart=ruleFractionalPart
	{ $current=$iv_ruleFractionalPart.current.getText(); }
	EOF;

// Rule FractionalPart
ruleFractionalPart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFractionalPartAccess().getFullStopKeyword_0());
		}
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getFractionalPartAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleExponentPart
entryRuleExponentPart returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExponentPartRule()); }
	iv_ruleExponentPart=ruleExponentPart
	{ $current=$iv_ruleExponentPart.current.getText(); }
	EOF;

// Rule ExponentPart
ruleExponentPart returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExponentPartAccess().getExponentIndicatorParserRuleCall_0());
		}
		this_ExponentIndicator_0=ruleExponentIndicator
		{
			$current.merge(this_ExponentIndicator_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getExponentPartAccess().getSignParserRuleCall_1());
			}
			this_Sign_1=ruleSign
			{
				$current.merge(this_Sign_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getExponentPartAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleExponentIndicator
entryRuleExponentIndicator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExponentIndicatorRule()); }
	iv_ruleExponentIndicator=ruleExponentIndicator
	{ $current=$iv_ruleExponentIndicator.current.getText(); }
	EOF;

// Rule ExponentIndicator
ruleExponentIndicator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='e'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExponentIndicatorAccess().getEKeyword_0());
		}
		    |
		kw='E'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExponentIndicatorAccess().getEKeyword_1());
		}
	)
;

// Entry rule entryRuleSign
entryRuleSign returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSignRule()); }
	iv_ruleSign=ruleSign
	{ $current=$iv_ruleSign.current.getText(); }
	EOF;

// Rule Sign
ruleSign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSignAccess().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSignAccess().getHyphenMinusKeyword_1());
		}
	)
;

// Entry rule entryRuleStringValue
entryRuleStringValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	iv_ruleStringValue=ruleStringValue
	{ $current=$iv_ruleStringValue.current.getText(); }
	EOF;

// Rule StringValue
ruleStringValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='"'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getStringValueAccess().getQuotationMarkKeyword_0_0());
			}
			kw='"'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getStringValueAccess().getQuotationMarkKeyword_0_1());
			}
		)
		    |
		(
			kw='"'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getStringValueAccess().getQuotationMarkKeyword_1_0());
			}
			this_STRING_3=RULE_STRING
			{
				$current.merge(this_STRING_3);
			}
			{
				newLeafNode(this_STRING_3, grammarAccess.getStringValueAccess().getSTRINGTerminalRuleCall_1_1());
			}
			kw='"'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getStringValueAccess().getQuotationMarkKeyword_1_2());
			}
		)
	)
;

RULE_COMMA : ',';

RULE_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_BOOLEANVALUE : ('true'|'false');

RULE_NULLVALUE : 'null';

RULE_NONZERODIGIT : '1'..'9';

RULE_SCALAR : ('Int'|'Float'|'String'|'Boolean'|'ID');

RULE_ENUM_VALUE : ('A'..'Z'|'_') ('A'..'Z'|'_'|'0'..'9')*;

RULE_NAME : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
