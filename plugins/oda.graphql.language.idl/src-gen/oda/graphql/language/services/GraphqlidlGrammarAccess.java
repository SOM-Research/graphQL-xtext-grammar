/*
 * generated by Xtext 2.10.0
 */
package oda.graphql.language.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GraphqlidlGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GraphqlSchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlSchema");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cSchemaAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cSchemaGraphqlSchemaDefinitionParserRuleCall_0_0 = (RuleCall)cSchemaAssignment_0.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cTypesGraphqlTypeDefinitionParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		
		//GraphqlSchema:
		//	schema=GraphqlSchemaDefinition & types+=GraphqlTypeDefinition*;
		@Override public ParserRule getRule() { return rule; }
		
		//schema=GraphqlSchemaDefinition & types+=GraphqlTypeDefinition*
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//schema=GraphqlSchemaDefinition
		public Assignment getSchemaAssignment_0() { return cSchemaAssignment_0; }
		
		//GraphqlSchemaDefinition
		public RuleCall getSchemaGraphqlSchemaDefinitionParserRuleCall_0_0() { return cSchemaGraphqlSchemaDefinitionParserRuleCall_0_0; }
		
		//types+=GraphqlTypeDefinition*
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }
		
		//GraphqlTypeDefinition
		public RuleCall getTypesGraphqlTypeDefinitionParserRuleCall_1_0() { return cTypesGraphqlTypeDefinitionParserRuleCall_1_0; }
	}
	public class GraphqlSchemaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlSchemaDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameSchemaKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRootQueryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRootQueryGraphqlRootQueryParserRuleCall_2_0 = (RuleCall)cRootQueryAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMutationKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cMutationAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cMutationGraphqlObjectTypeDefinitionCrossReference_3_2_0 = (CrossReference)cMutationAssignment_3_2.eContents().get(0);
		private final RuleCall cMutationGraphqlObjectTypeDefinitionNAMETerminalRuleCall_3_2_0_1 = (RuleCall)cMutationGraphqlObjectTypeDefinitionCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSubscriptionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cColonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cSubcriptionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cSubcriptionGraphqlObjectTypeDefinitionCrossReference_4_2_0 = (CrossReference)cSubcriptionAssignment_4_2.eContents().get(0);
		private final RuleCall cSubcriptionGraphqlObjectTypeDefinitionNAMETerminalRuleCall_4_2_0_1 = (RuleCall)cSubcriptionGraphqlObjectTypeDefinitionCrossReference_4_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//GraphqlSchemaDefinition:
		//	name='schema' '{'
		//	rootQuery=GraphqlRootQuery ('mutation' ':' mutation=[GraphqlObjectTypeDefinition|NAME])? ('subscription' ':'
		//	subcription=[GraphqlObjectTypeDefinition|NAME])?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name='schema' '{' rootQuery=GraphqlRootQuery ('mutation' ':' mutation=[GraphqlObjectTypeDefinition|NAME])?
		//('subscription' ':' subcription=[GraphqlObjectTypeDefinition|NAME])? '}'
		public Group getGroup() { return cGroup; }
		
		//name='schema'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'schema'
		public Keyword getNameSchemaKeyword_0_0() { return cNameSchemaKeyword_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//rootQuery=GraphqlRootQuery
		public Assignment getRootQueryAssignment_2() { return cRootQueryAssignment_2; }
		
		//GraphqlRootQuery
		public RuleCall getRootQueryGraphqlRootQueryParserRuleCall_2_0() { return cRootQueryGraphqlRootQueryParserRuleCall_2_0; }
		
		//('mutation' ':' mutation=[GraphqlObjectTypeDefinition|NAME])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'mutation'
		public Keyword getMutationKeyword_3_0() { return cMutationKeyword_3_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//mutation=[GraphqlObjectTypeDefinition|NAME]
		public Assignment getMutationAssignment_3_2() { return cMutationAssignment_3_2; }
		
		//[GraphqlObjectTypeDefinition|NAME]
		public CrossReference getMutationGraphqlObjectTypeDefinitionCrossReference_3_2_0() { return cMutationGraphqlObjectTypeDefinitionCrossReference_3_2_0; }
		
		//NAME
		public RuleCall getMutationGraphqlObjectTypeDefinitionNAMETerminalRuleCall_3_2_0_1() { return cMutationGraphqlObjectTypeDefinitionNAMETerminalRuleCall_3_2_0_1; }
		
		//('subscription' ':' subcription=[GraphqlObjectTypeDefinition|NAME])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'subscription'
		public Keyword getSubscriptionKeyword_4_0() { return cSubscriptionKeyword_4_0; }
		
		//':'
		public Keyword getColonKeyword_4_1() { return cColonKeyword_4_1; }
		
		//subcription=[GraphqlObjectTypeDefinition|NAME]
		public Assignment getSubcriptionAssignment_4_2() { return cSubcriptionAssignment_4_2; }
		
		//[GraphqlObjectTypeDefinition|NAME]
		public CrossReference getSubcriptionGraphqlObjectTypeDefinitionCrossReference_4_2_0() { return cSubcriptionGraphqlObjectTypeDefinitionCrossReference_4_2_0; }
		
		//NAME
		public RuleCall getSubcriptionGraphqlObjectTypeDefinitionNAMETerminalRuleCall_4_2_0_1() { return cSubcriptionGraphqlObjectTypeDefinitionNAMETerminalRuleCall_4_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class GraphqlRootQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlRootQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameQueryKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQueryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cQueryGraphqlObjectTypeDefinitionCrossReference_2_0 = (CrossReference)cQueryAssignment_2.eContents().get(0);
		private final RuleCall cQueryGraphqlObjectTypeDefinitionNAMETerminalRuleCall_2_0_1 = (RuleCall)cQueryGraphqlObjectTypeDefinitionCrossReference_2_0.eContents().get(1);
		
		//GraphqlRootQuery:
		//	name='query' ':' query=[GraphqlObjectTypeDefinition|NAME];
		@Override public ParserRule getRule() { return rule; }
		
		//name='query' ':' query=[GraphqlObjectTypeDefinition|NAME]
		public Group getGroup() { return cGroup; }
		
		//name='query'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'query'
		public Keyword getNameQueryKeyword_0_0() { return cNameQueryKeyword_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//query=[GraphqlObjectTypeDefinition|NAME]
		public Assignment getQueryAssignment_2() { return cQueryAssignment_2; }
		
		//[GraphqlObjectTypeDefinition|NAME]
		public CrossReference getQueryGraphqlObjectTypeDefinitionCrossReference_2_0() { return cQueryGraphqlObjectTypeDefinitionCrossReference_2_0; }
		
		//NAME
		public RuleCall getQueryGraphqlObjectTypeDefinitionNAMETerminalRuleCall_2_0_1() { return cQueryGraphqlObjectTypeDefinitionNAMETerminalRuleCall_2_0_1; }
	}
	public class GraphqlTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlTypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGraphqlObjectTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGraphqlScalarTypeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGraphqlInterfaceTypeDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGraphqlUnionTypeDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGraphqlEmunTypeDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGraphqlInputTypeDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//GraphqlTypeDefinition:
		//	GraphqlObjectTypeDefinition | GraphqlScalarTypeDefinition | GraphqlInterfaceTypeDefinition |
		//	GraphqlUnionTypeDefinition | GraphqlEmunTypeDefinition | GraphqlInputTypeDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//GraphqlObjectTypeDefinition | GraphqlScalarTypeDefinition | GraphqlInterfaceTypeDefinition | GraphqlUnionTypeDefinition
		//| GraphqlEmunTypeDefinition | GraphqlInputTypeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GraphqlObjectTypeDefinition
		public RuleCall getGraphqlObjectTypeDefinitionParserRuleCall_0() { return cGraphqlObjectTypeDefinitionParserRuleCall_0; }
		
		//GraphqlScalarTypeDefinition
		public RuleCall getGraphqlScalarTypeDefinitionParserRuleCall_1() { return cGraphqlScalarTypeDefinitionParserRuleCall_1; }
		
		//GraphqlInterfaceTypeDefinition
		public RuleCall getGraphqlInterfaceTypeDefinitionParserRuleCall_2() { return cGraphqlInterfaceTypeDefinitionParserRuleCall_2; }
		
		//GraphqlUnionTypeDefinition
		public RuleCall getGraphqlUnionTypeDefinitionParserRuleCall_3() { return cGraphqlUnionTypeDefinitionParserRuleCall_3; }
		
		//GraphqlEmunTypeDefinition
		public RuleCall getGraphqlEmunTypeDefinitionParserRuleCall_4() { return cGraphqlEmunTypeDefinitionParserRuleCall_4; }
		
		//GraphqlInputTypeDefinition
		public RuleCall getGraphqlInputTypeDefinitionParserRuleCall_5() { return cGraphqlInputTypeDefinitionParserRuleCall_5; }
	}
	public class GraphqlObjectTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlObjectTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cImplementsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInterfacesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cInterfacesGraphqlInterfaceTypeDefinitionCrossReference_2_1_0 = (CrossReference)cInterfacesAssignment_2_1.eContents().get(0);
		private final RuleCall cInterfacesGraphqlInterfaceTypeDefinitionNAMETerminalRuleCall_2_1_0_1 = (RuleCall)cInterfacesGraphqlInterfaceTypeDefinitionCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFieldsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFieldsGraphqlFieldParserRuleCall_4_0 = (RuleCall)cFieldsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//GraphqlObjectTypeDefinition:
		//	'type' name=NAME ('implements' interfaces+=[GraphqlInterfaceTypeDefinition|NAME]+)? '{' fields+=GraphqlField+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'type' name=NAME ('implements' interfaces+=[GraphqlInterfaceTypeDefinition|NAME]+)? '{' fields+=GraphqlField+ '}'
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//('implements' interfaces+=[GraphqlInterfaceTypeDefinition|NAME]+)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'implements'
		public Keyword getImplementsKeyword_2_0() { return cImplementsKeyword_2_0; }
		
		//interfaces+=[GraphqlInterfaceTypeDefinition|NAME]+
		public Assignment getInterfacesAssignment_2_1() { return cInterfacesAssignment_2_1; }
		
		//[GraphqlInterfaceTypeDefinition|NAME]
		public CrossReference getInterfacesGraphqlInterfaceTypeDefinitionCrossReference_2_1_0() { return cInterfacesGraphqlInterfaceTypeDefinitionCrossReference_2_1_0; }
		
		//NAME
		public RuleCall getInterfacesGraphqlInterfaceTypeDefinitionNAMETerminalRuleCall_2_1_0_1() { return cInterfacesGraphqlInterfaceTypeDefinitionNAMETerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//fields+=GraphqlField+
		public Assignment getFieldsAssignment_4() { return cFieldsAssignment_4; }
		
		//GraphqlField
		public RuleCall getFieldsGraphqlFieldParserRuleCall_4_0() { return cFieldsGraphqlFieldParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class GraphqlInterfaceTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlInterfaceTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsGraphqlFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GraphqlInterfaceTypeDefinition:
		//	'interface' name=NAME '{' fields+=GraphqlField+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'interface' name=NAME '{' fields+=GraphqlField+ '}'
		public Group getGroup() { return cGroup; }
		
		//'interface'
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//fields+=GraphqlField+
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }
		
		//GraphqlField
		public RuleCall getFieldsGraphqlFieldParserRuleCall_3_0() { return cFieldsGraphqlFieldParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class GraphqlScalarTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlScalarTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScalarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//GraphqlScalarTypeDefinition:
		//	'scalar' name=NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//'scalar' name=NAME
		public Group getGroup() { return cGroup; }
		
		//'scalar'
		public Keyword getScalarKeyword_0() { return cScalarKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
	}
	public class GraphqlEmunTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlEmunTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesEnumValueParserRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GraphqlEmunTypeDefinition:
		//	'enum' name=NAME '{' values+=EnumValue+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enum' name=NAME '{' values+=EnumValue+ '}'
		public Group getGroup() { return cGroup; }
		
		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//values+=EnumValue+
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }
		
		//EnumValue
		public RuleCall getValuesEnumValueParserRuleCall_3_0() { return cValuesEnumValueParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class GraphqlUnionTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlUnionTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cMembersGraphqlObjectTypeDefinitionCrossReference_3_0 = (CrossReference)cMembersAssignment_3.eContents().get(0);
		private final RuleCall cMembersGraphqlObjectTypeDefinitionNAMETerminalRuleCall_3_0_1 = (RuleCall)cMembersGraphqlObjectTypeDefinitionCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMembersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cMembersGraphqlObjectTypeDefinitionCrossReference_4_1_0 = (CrossReference)cMembersAssignment_4_1.eContents().get(0);
		private final RuleCall cMembersGraphqlObjectTypeDefinitionNAMETerminalRuleCall_4_1_0_1 = (RuleCall)cMembersGraphqlObjectTypeDefinitionCrossReference_4_1_0.eContents().get(1);
		
		//GraphqlUnionTypeDefinition:
		//	'union' name=NAME '=' members+=[GraphqlObjectTypeDefinition|NAME] ('|' members+=[GraphqlObjectTypeDefinition|NAME])*;
		@Override public ParserRule getRule() { return rule; }
		
		//'union' name=NAME '=' members+=[GraphqlObjectTypeDefinition|NAME] ('|' members+=[GraphqlObjectTypeDefinition|NAME])*
		public Group getGroup() { return cGroup; }
		
		//'union'
		public Keyword getUnionKeyword_0() { return cUnionKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//members+=[GraphqlObjectTypeDefinition|NAME]
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }
		
		//[GraphqlObjectTypeDefinition|NAME]
		public CrossReference getMembersGraphqlObjectTypeDefinitionCrossReference_3_0() { return cMembersGraphqlObjectTypeDefinitionCrossReference_3_0; }
		
		//NAME
		public RuleCall getMembersGraphqlObjectTypeDefinitionNAMETerminalRuleCall_3_0_1() { return cMembersGraphqlObjectTypeDefinitionNAMETerminalRuleCall_3_0_1; }
		
		//('|' members+=[GraphqlObjectTypeDefinition|NAME])*
		public Group getGroup_4() { return cGroup_4; }
		
		//'|'
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }
		
		//members+=[GraphqlObjectTypeDefinition|NAME]
		public Assignment getMembersAssignment_4_1() { return cMembersAssignment_4_1; }
		
		//[GraphqlObjectTypeDefinition|NAME]
		public CrossReference getMembersGraphqlObjectTypeDefinitionCrossReference_4_1_0() { return cMembersGraphqlObjectTypeDefinitionCrossReference_4_1_0; }
		
		//NAME
		public RuleCall getMembersGraphqlObjectTypeDefinitionNAMETerminalRuleCall_4_1_0_1() { return cMembersGraphqlObjectTypeDefinitionNAMETerminalRuleCall_4_1_0_1; }
	}
	public class GraphqlInputTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlInputTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNAMETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsGraphqlInputFieldParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GraphqlInputTypeDefinition:
		//	'input' name=NAME '{' fields+=GraphqlInputField+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'input' name=NAME '{' fields+=GraphqlInputField+ '}'
		public Group getGroup() { return cGroup; }
		
		//'input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//name=NAME
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_1_0() { return cNameNAMETerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//fields+=GraphqlInputField+
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }
		
		//GraphqlInputField
		public RuleCall getFieldsGraphqlInputFieldParserRuleCall_3_0() { return cFieldsGraphqlInputFieldParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class GraphqlInputFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlInputField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeGraphqlInputTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//GraphqlInputField:
		//	name=NAME ':' type=GraphqlInputType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=NAME ':' type=GraphqlInputType
		public Group getGroup() { return cGroup; }
		
		//name=NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_0_0() { return cNameNAMETerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=GraphqlInputType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//GraphqlInputType
		public RuleCall getTypeGraphqlInputTypeParserRuleCall_2_0() { return cTypeGraphqlInputTypeParserRuleCall_2_0; }
	}
	public class GraphqlFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsArgumentParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeGraphqlTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//GraphqlField:
		//	name=NAME ('(' args+=Argument ')')* ':' type=GraphqlType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=NAME ('(' args+=Argument ')')* ':' type=GraphqlType
		public Group getGroup() { return cGroup; }
		
		//name=NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_0_0() { return cNameNAMETerminalRuleCall_0_0; }
		
		//('(' args+=Argument ')')*
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//args+=Argument
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }
		
		//Argument
		public RuleCall getArgsArgumentParserRuleCall_1_1_0() { return cArgsArgumentParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=GraphqlType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//GraphqlType
		public RuleCall getTypeGraphqlTypeParserRuleCall_3_0() { return cTypeGraphqlTypeParserRuleCall_3_0; }
	}
	public class GraphqlTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDtypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cDtypeGraphqlTypeDefinitionCrossReference_0_0_0 = (CrossReference)cDtypeAssignment_0_0.eContents().get(0);
		private final RuleCall cDtypeGraphqlTypeDefinitionNAMETerminalRuleCall_0_0_0_1 = (RuleCall)cDtypeGraphqlTypeDefinitionCrossReference_0_0_0.eContents().get(1);
		private final Assignment cNonNullAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNonNullExclamationMarkKeyword_0_1_0 = (Keyword)cNonNullAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNtypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNtypeGraphqlNamedTypeParserRuleCall_1_0_0 = (RuleCall)cNtypeAssignment_1_0.eContents().get(0);
		private final Assignment cNonNullAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNonNullExclamationMarkKeyword_1_1_0 = (Keyword)cNonNullAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cLtypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLtypeGraphqlListTypeParserRuleCall_2_0_0 = (RuleCall)cLtypeAssignment_2_0.eContents().get(0);
		private final Assignment cNonNullAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cNonNullExclamationMarkKeyword_2_1_0 = (Keyword)cNonNullAssignment_2_1.eContents().get(0);
		
		//GraphqlType:
		//	dtype=[GraphqlTypeDefinition|NAME] nonNull?='!'? | ntype=GraphqlNamedType nonNull?='!'? | ltype=GraphqlListType
		//	nonNull?='!'?;
		@Override public ParserRule getRule() { return rule; }
		
		//dtype=[GraphqlTypeDefinition|NAME] nonNull?='!'? | ntype=GraphqlNamedType nonNull?='!'? | ltype=GraphqlListType
		//nonNull?='!'?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//dtype=[GraphqlTypeDefinition|NAME] nonNull?='!'?
		public Group getGroup_0() { return cGroup_0; }
		
		//dtype=[GraphqlTypeDefinition|NAME]
		public Assignment getDtypeAssignment_0_0() { return cDtypeAssignment_0_0; }
		
		//[GraphqlTypeDefinition|NAME]
		public CrossReference getDtypeGraphqlTypeDefinitionCrossReference_0_0_0() { return cDtypeGraphqlTypeDefinitionCrossReference_0_0_0; }
		
		//NAME
		public RuleCall getDtypeGraphqlTypeDefinitionNAMETerminalRuleCall_0_0_0_1() { return cDtypeGraphqlTypeDefinitionNAMETerminalRuleCall_0_0_0_1; }
		
		//nonNull?='!'?
		public Assignment getNonNullAssignment_0_1() { return cNonNullAssignment_0_1; }
		
		//'!'
		public Keyword getNonNullExclamationMarkKeyword_0_1_0() { return cNonNullExclamationMarkKeyword_0_1_0; }
		
		//ntype=GraphqlNamedType nonNull?='!'?
		public Group getGroup_1() { return cGroup_1; }
		
		//ntype=GraphqlNamedType
		public Assignment getNtypeAssignment_1_0() { return cNtypeAssignment_1_0; }
		
		//GraphqlNamedType
		public RuleCall getNtypeGraphqlNamedTypeParserRuleCall_1_0_0() { return cNtypeGraphqlNamedTypeParserRuleCall_1_0_0; }
		
		//nonNull?='!'?
		public Assignment getNonNullAssignment_1_1() { return cNonNullAssignment_1_1; }
		
		//'!'
		public Keyword getNonNullExclamationMarkKeyword_1_1_0() { return cNonNullExclamationMarkKeyword_1_1_0; }
		
		//ltype=GraphqlListType nonNull?='!'?
		public Group getGroup_2() { return cGroup_2; }
		
		//ltype=GraphqlListType
		public Assignment getLtypeAssignment_2_0() { return cLtypeAssignment_2_0; }
		
		//GraphqlListType
		public RuleCall getLtypeGraphqlListTypeParserRuleCall_2_0_0() { return cLtypeGraphqlListTypeParserRuleCall_2_0_0; }
		
		//nonNull?='!'?
		public Assignment getNonNullAssignment_2_1() { return cNonNullAssignment_2_1; }
		
		//'!'
		public Keyword getNonNullExclamationMarkKeyword_2_1_0() { return cNonNullExclamationMarkKeyword_2_1_0; }
	}
	public class GraphqlNamedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlNamedType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameSCALARTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//GraphqlNamedType:
		//	name=SCALAR;
		@Override public ParserRule getRule() { return rule; }
		
		//name=SCALAR
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//SCALAR
		public RuleCall getNameSCALARTerminalRuleCall_0() { return cNameSCALARTerminalRuleCall_0; }
	}
	public class GraphqlListTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlListType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cGraphqlTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//GraphqlListType:
		//	'[' GraphqlType ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' GraphqlType ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//GraphqlType
		public RuleCall getGraphqlTypeParserRuleCall_1() { return cGraphqlTypeParserRuleCall_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class GraphqlInputTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlInputType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDtypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cDtypeGraphqlInputTypeDefinitionCrossReference_0_0_0 = (CrossReference)cDtypeAssignment_0_0.eContents().get(0);
		private final RuleCall cDtypeGraphqlInputTypeDefinitionNAMETerminalRuleCall_0_0_0_1 = (RuleCall)cDtypeGraphqlInputTypeDefinitionCrossReference_0_0_0.eContents().get(1);
		private final Assignment cNonNullAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNonNullExclamationMarkKeyword_0_1_0 = (Keyword)cNonNullAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNtypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNtypeGraphqlNamedTypeParserRuleCall_1_0_0 = (RuleCall)cNtypeAssignment_1_0.eContents().get(0);
		private final Assignment cNonNullAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNonNullExclamationMarkKeyword_1_1_0 = (Keyword)cNonNullAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cLtypeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLtypeGraphqlListInputTypeParserRuleCall_2_0_0 = (RuleCall)cLtypeAssignment_2_0.eContents().get(0);
		private final Assignment cNonNullAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cNonNullExclamationMarkKeyword_2_1_0 = (Keyword)cNonNullAssignment_2_1.eContents().get(0);
		
		////The fields on an input object type can themselves refer to input object types, but you can't mix input and output types in your schema
		//GraphqlInputType:
		//	dtype=[GraphqlInputTypeDefinition|NAME] nonNull?='!'? | ntype=GraphqlNamedType nonNull?='!'? |
		//	ltype=GraphqlListInputType nonNull?='!'?;
		@Override public ParserRule getRule() { return rule; }
		
		//dtype=[GraphqlInputTypeDefinition|NAME] nonNull?='!'? | ntype=GraphqlNamedType nonNull?='!'? |
		//ltype=GraphqlListInputType nonNull?='!'?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//dtype=[GraphqlInputTypeDefinition|NAME] nonNull?='!'?
		public Group getGroup_0() { return cGroup_0; }
		
		//dtype=[GraphqlInputTypeDefinition|NAME]
		public Assignment getDtypeAssignment_0_0() { return cDtypeAssignment_0_0; }
		
		//[GraphqlInputTypeDefinition|NAME]
		public CrossReference getDtypeGraphqlInputTypeDefinitionCrossReference_0_0_0() { return cDtypeGraphqlInputTypeDefinitionCrossReference_0_0_0; }
		
		//NAME
		public RuleCall getDtypeGraphqlInputTypeDefinitionNAMETerminalRuleCall_0_0_0_1() { return cDtypeGraphqlInputTypeDefinitionNAMETerminalRuleCall_0_0_0_1; }
		
		//nonNull?='!'?
		public Assignment getNonNullAssignment_0_1() { return cNonNullAssignment_0_1; }
		
		//'!'
		public Keyword getNonNullExclamationMarkKeyword_0_1_0() { return cNonNullExclamationMarkKeyword_0_1_0; }
		
		//ntype=GraphqlNamedType nonNull?='!'?
		public Group getGroup_1() { return cGroup_1; }
		
		//ntype=GraphqlNamedType
		public Assignment getNtypeAssignment_1_0() { return cNtypeAssignment_1_0; }
		
		//GraphqlNamedType
		public RuleCall getNtypeGraphqlNamedTypeParserRuleCall_1_0_0() { return cNtypeGraphqlNamedTypeParserRuleCall_1_0_0; }
		
		//nonNull?='!'?
		public Assignment getNonNullAssignment_1_1() { return cNonNullAssignment_1_1; }
		
		//'!'
		public Keyword getNonNullExclamationMarkKeyword_1_1_0() { return cNonNullExclamationMarkKeyword_1_1_0; }
		
		//ltype=GraphqlListInputType nonNull?='!'?
		public Group getGroup_2() { return cGroup_2; }
		
		//ltype=GraphqlListInputType
		public Assignment getLtypeAssignment_2_0() { return cLtypeAssignment_2_0; }
		
		//GraphqlListInputType
		public RuleCall getLtypeGraphqlListInputTypeParserRuleCall_2_0_0() { return cLtypeGraphqlListInputTypeParserRuleCall_2_0_0; }
		
		//nonNull?='!'?
		public Assignment getNonNullAssignment_2_1() { return cNonNullAssignment_2_1; }
		
		//'!'
		public Keyword getNonNullExclamationMarkKeyword_2_1_0() { return cNonNullExclamationMarkKeyword_2_1_0; }
	}
	public class GraphqlListInputTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlListInputType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cGraphqlInputTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//GraphqlListInputType:
		//	'[' GraphqlInputType ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' GraphqlInputType ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//GraphqlInputType
		public RuleCall getGraphqlInputTypeParserRuleCall_1() { return cGraphqlInputTypeParserRuleCall_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeGraphqlTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefValueGraphqlValueParserRuleCall_3_1_0 = (RuleCall)cDefValueAssignment_3_1.eContents().get(0);
		
		//Argument:
		//	name=NAME ':' type=GraphqlType ('=' defValue=GraphqlValue)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=NAME ':' type=GraphqlType ('=' defValue=GraphqlValue)?
		public Group getGroup() { return cGroup; }
		
		//name=NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_0_0() { return cNameNAMETerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=GraphqlType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//GraphqlType
		public RuleCall getTypeGraphqlTypeParserRuleCall_2_0() { return cTypeGraphqlTypeParserRuleCall_2_0; }
		
		//('=' defValue=GraphqlValue)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//defValue=GraphqlValue
		public Assignment getDefValueAssignment_3_1() { return cDefValueAssignment_3_1; }
		
		//GraphqlValue
		public RuleCall getDefValueGraphqlValueParserRuleCall_3_1_0() { return cDefValueGraphqlValueParserRuleCall_3_1_0; }
	}
	public class GraphqlValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.GraphqlValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSvAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSvSingleValueParserRuleCall_0_0 = (RuleCall)cSvAssignment_0.eContents().get(0);
		private final Assignment cEvAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cEvEnumValueCrossReference_1_0 = (CrossReference)cEvAssignment_1.eContents().get(0);
		private final RuleCall cEvEnumValueNAMETerminalRuleCall_1_0_1 = (RuleCall)cEvEnumValueCrossReference_1_0.eContents().get(1);
		private final Assignment cCvAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCvComplexValueParserRuleCall_2_0 = (RuleCall)cCvAssignment_2.eContents().get(0);
		
		////DefaultValue:
		////	Value 
		////;
		//GraphqlValue:
		//	sv=SingleValue | ev=[EnumValue|NAME] | cv=ComplexValue //condition added to solve different returned types for value attr
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//sv=SingleValue | ev=[EnumValue|NAME] | cv=ComplexValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//sv=SingleValue
		public Assignment getSvAssignment_0() { return cSvAssignment_0; }
		
		//SingleValue
		public RuleCall getSvSingleValueParserRuleCall_0_0() { return cSvSingleValueParserRuleCall_0_0; }
		
		//ev=[EnumValue|NAME]
		public Assignment getEvAssignment_1() { return cEvAssignment_1; }
		
		//[EnumValue|NAME]
		public CrossReference getEvEnumValueCrossReference_1_0() { return cEvEnumValueCrossReference_1_0; }
		
		//NAME
		public RuleCall getEvEnumValueNAMETerminalRuleCall_1_0_1() { return cEvEnumValueNAMETerminalRuleCall_1_0_1; }
		
		//cv=ComplexValue
		public Assignment getCvAssignment_2() { return cCvAssignment_2; }
		
		//ComplexValue
		public RuleCall getCvComplexValueParserRuleCall_2_0() { return cCvComplexValueParserRuleCall_2_0; }
	}
	public class SingleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.SingleValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueIntValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueFloatValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValueStringValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cValueBOOLEANVALUETerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cValueNULLVALUETerminalRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//SingleValue:
		//	value=IntValue | value=FloatValue | value=StringValue | value=BOOLEANVALUE | value=NULLVALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=IntValue | value=FloatValue | value=StringValue | value=BOOLEANVALUE | value=NULLVALUE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=IntValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//IntValue
		public RuleCall getValueIntValueParserRuleCall_0_0() { return cValueIntValueParserRuleCall_0_0; }
		
		//value=FloatValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//FloatValue
		public RuleCall getValueFloatValueParserRuleCall_1_0() { return cValueFloatValueParserRuleCall_1_0; }
		
		//value=StringValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//StringValue
		public RuleCall getValueStringValueParserRuleCall_2_0() { return cValueStringValueParserRuleCall_2_0; }
		
		//value=BOOLEANVALUE
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//BOOLEANVALUE
		public RuleCall getValueBOOLEANVALUETerminalRuleCall_3_0() { return cValueBOOLEANVALUETerminalRuleCall_3_0; }
		
		//value=NULLVALUE
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }
		
		//NULLVALUE
		public RuleCall getValueNULLVALUETerminalRuleCall_4_0() { return cValueNULLVALUETerminalRuleCall_4_0; }
	}
	public class ComplexValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.ComplexValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueListValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueObjectValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ComplexValue:
		//	value=ListValue | value=ObjectValue;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ListValue | value=ObjectValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=ListValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//ListValue
		public RuleCall getValueListValueParserRuleCall_0_0() { return cValueListValueParserRuleCall_0_0; }
		
		//value=ObjectValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//ObjectValue
		public RuleCall getValueObjectValueParserRuleCall_1_0() { return cValueObjectValueParserRuleCall_1_0; }
	}
	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.EnumValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameENUM_VALUETerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EnumValue:
		//	{EnumValue} name=ENUM_VALUE;
		@Override public ParserRule getRule() { return rule; }
		
		//{EnumValue} name=ENUM_VALUE
		public Group getGroup() { return cGroup; }
		
		//{EnumValue}
		public Action getEnumValueAction_0() { return cEnumValueAction_0; }
		
		//name=ENUM_VALUE
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ENUM_VALUE
		public RuleCall getNameENUM_VALUETerminalRuleCall_1_0() { return cNameENUM_VALUETerminalRuleCall_1_0; }
	}
	public class ListValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.ListValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesGraphqlValueParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListValue:
		//	{ListValue} '[' values+=GraphqlValue* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{ListValue} '[' values+=GraphqlValue* ']'
		public Group getGroup() { return cGroup; }
		
		//{ListValue}
		public Action getListValueAction_0() { return cListValueAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//values+=GraphqlValue*
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//GraphqlValue
		public RuleCall getValuesGraphqlValueParserRuleCall_2_0() { return cValuesGraphqlValueParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ObjectValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.ObjectValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldsObjectFieldParserRuleCall_2_0 = (RuleCall)cFieldsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ObjectValue:
		//	{ObjectValue} '{' fields+=ObjectField* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ObjectValue} '{' fields+=ObjectField* '}'
		public Group getGroup() { return cGroup; }
		
		//{ObjectValue}
		public Action getObjectValueAction_0() { return cObjectValueAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//fields+=ObjectField*
		public Assignment getFieldsAssignment_2() { return cFieldsAssignment_2; }
		
		//ObjectField
		public RuleCall getFieldsObjectFieldParserRuleCall_2_0() { return cFieldsObjectFieldParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ObjectFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.ObjectField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNAMETerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueGraphqlValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ObjectField:
		//	name=NAME ':' value=GraphqlValue;
		@Override public ParserRule getRule() { return rule; }
		
		//name=NAME ':' value=GraphqlValue
		public Group getGroup() { return cGroup; }
		
		//name=NAME
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//NAME
		public RuleCall getNameNAMETerminalRuleCall_0_0() { return cNameNAMETerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=GraphqlValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//GraphqlValue
		public RuleCall getValueGraphqlValueParserRuleCall_2_0() { return cValueGraphqlValueParserRuleCall_2_0; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.IntValue");
		private final RuleCall cIntegerPartParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntValue:
		//	IntegerPart;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerPart
		public RuleCall getIntegerPartParserRuleCall() { return cIntegerPartParserRuleCall; }
	}
	public class IntegerPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.IntegerPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cNegativeSignParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cDigitZeroKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cNegativeSignParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cNONZERODIGITTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//IntegerPart:
		//	NegativeSign? '0' | NegativeSign? NONZERODIGIT INT;
		@Override public ParserRule getRule() { return rule; }
		
		////returns ecore::EInt: 
		//NegativeSign? '0' | NegativeSign? NONZERODIGIT INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////returns ecore::EInt: 
		//NegativeSign? '0'
		public Group getGroup_0() { return cGroup_0; }
		
		////returns ecore::EInt: 
		//NegativeSign?
		public RuleCall getNegativeSignParserRuleCall_0_0() { return cNegativeSignParserRuleCall_0_0; }
		
		//'0'
		public Keyword getDigitZeroKeyword_0_1() { return cDigitZeroKeyword_0_1; }
		
		//NegativeSign? NONZERODIGIT INT
		public Group getGroup_1() { return cGroup_1; }
		
		//NegativeSign?
		public RuleCall getNegativeSignParserRuleCall_1_0() { return cNegativeSignParserRuleCall_1_0; }
		
		//NONZERODIGIT
		public RuleCall getNONZERODIGITTerminalRuleCall_1_1() { return cNONZERODIGITTerminalRuleCall_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }
	}
	public class NegativeSignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.NegativeSign");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//NegativeSign:
		//	'-';
		@Override public ParserRule getRule() { return rule; }
		
		//'-'
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}
	public class FloatValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.FloatValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerPartParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cFractionalPartParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerPartParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cExponentPartParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cIntegerPartParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cFractionalPartParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cExponentPartParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//FloatValue:
		//	IntegerPart FractionalPart | IntegerPart ExponentPart | IntegerPart FractionalPart ExponentPart;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerPart FractionalPart | IntegerPart ExponentPart | IntegerPart FractionalPart ExponentPart
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerPart FractionalPart
		public Group getGroup_0() { return cGroup_0; }
		
		//IntegerPart
		public RuleCall getIntegerPartParserRuleCall_0_0() { return cIntegerPartParserRuleCall_0_0; }
		
		//FractionalPart
		public RuleCall getFractionalPartParserRuleCall_0_1() { return cFractionalPartParserRuleCall_0_1; }
		
		//IntegerPart ExponentPart
		public Group getGroup_1() { return cGroup_1; }
		
		//IntegerPart
		public RuleCall getIntegerPartParserRuleCall_1_0() { return cIntegerPartParserRuleCall_1_0; }
		
		//ExponentPart
		public RuleCall getExponentPartParserRuleCall_1_1() { return cExponentPartParserRuleCall_1_1; }
		
		//IntegerPart FractionalPart ExponentPart
		public Group getGroup_2() { return cGroup_2; }
		
		//IntegerPart
		public RuleCall getIntegerPartParserRuleCall_2_0() { return cIntegerPartParserRuleCall_2_0; }
		
		//FractionalPart
		public RuleCall getFractionalPartParserRuleCall_2_1() { return cFractionalPartParserRuleCall_2_1; }
		
		//ExponentPart
		public RuleCall getExponentPartParserRuleCall_2_2() { return cExponentPartParserRuleCall_2_2; }
	}
	public class FractionalPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.FractionalPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FractionalPart:
		//	'.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' INT
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class ExponentPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.ExponentPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExponentIndicatorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSignParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ExponentPart:
		//	ExponentIndicator Sign? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//ExponentIndicator Sign? INT
		public Group getGroup() { return cGroup; }
		
		//ExponentIndicator
		public RuleCall getExponentIndicatorParserRuleCall_0() { return cExponentIndicatorParserRuleCall_0; }
		
		//Sign?
		public RuleCall getSignParserRuleCall_1() { return cSignParserRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class ExponentIndicatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.ExponentIndicator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ExponentIndicator: //TODO: could be enum rule but then ExponentPart should assign the returned value
		//	'e' | 'E';
		@Override public ParserRule getRule() { return rule; }
		
		////TODO: could be enum rule but then ExponentPart should assign the returned value
		//'e' | 'E'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////TODO: could be enum rule but then ExponentPart should assign the returned value
		//'e'
		public Keyword getEKeyword_0() { return cEKeyword_0; }
		
		//'E'
		public Keyword getEKeyword_1() { return cEKeyword_1; }
	}
	public class SignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.Sign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Sign: //TODO: could be enum rule but then ExponentPart should assign the returned value
		//	'+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		////TODO: could be enum rule but then ExponentPart should assign the returned value
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////TODO: could be enum rule but then ExponentPart should assign the returned value
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.StringValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cQuotationMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cQuotationMarkKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//StringValue:
		//	'"' '"' |
		//	'"' STRING '"';
		@Override public ParserRule getRule() { return rule; }
		
		//'"' '"' | '"' STRING '"'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'"' '"'
		public Group getGroup_0() { return cGroup_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_0_0() { return cQuotationMarkKeyword_0_0; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_0_1() { return cQuotationMarkKeyword_0_1; }
		
		//'"' STRING '"'
		public Group getGroup_1() { return cGroup_1; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1_0() { return cQuotationMarkKeyword_1_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_1_2() { return cQuotationMarkKeyword_1_2; }
	}
	
	
	private final GraphqlSchemaElements pGraphqlSchema;
	private final GraphqlSchemaDefinitionElements pGraphqlSchemaDefinition;
	private final GraphqlRootQueryElements pGraphqlRootQuery;
	private final GraphqlTypeDefinitionElements pGraphqlTypeDefinition;
	private final GraphqlObjectTypeDefinitionElements pGraphqlObjectTypeDefinition;
	private final GraphqlInterfaceTypeDefinitionElements pGraphqlInterfaceTypeDefinition;
	private final GraphqlScalarTypeDefinitionElements pGraphqlScalarTypeDefinition;
	private final GraphqlEmunTypeDefinitionElements pGraphqlEmunTypeDefinition;
	private final GraphqlUnionTypeDefinitionElements pGraphqlUnionTypeDefinition;
	private final GraphqlInputTypeDefinitionElements pGraphqlInputTypeDefinition;
	private final GraphqlInputFieldElements pGraphqlInputField;
	private final GraphqlFieldElements pGraphqlField;
	private final GraphqlTypeElements pGraphqlType;
	private final GraphqlNamedTypeElements pGraphqlNamedType;
	private final GraphqlListTypeElements pGraphqlListType;
	private final GraphqlInputTypeElements pGraphqlInputType;
	private final GraphqlListInputTypeElements pGraphqlListInputType;
	private final ArgumentElements pArgument;
	private final GraphqlValueElements pGraphqlValue;
	private final SingleValueElements pSingleValue;
	private final ComplexValueElements pComplexValue;
	private final EnumValueElements pEnumValue;
	private final ListValueElements pListValue;
	private final ObjectValueElements pObjectValue;
	private final ObjectFieldElements pObjectField;
	private final TerminalRule tCOMMA;
	private final TerminalRule tCOMMENT;
	private final TerminalRule tBOOLEANVALUE;
	private final TerminalRule tNULLVALUE;
	private final TerminalRule tNONZERODIGIT;
	private final TerminalRule tSCALAR;
	private final TerminalRule tENUM_VALUE;
	private final TerminalRule tNAME;
	private final IntValueElements pIntValue;
	private final IntegerPartElements pIntegerPart;
	private final NegativeSignElements pNegativeSign;
	private final FloatValueElements pFloatValue;
	private final FractionalPartElements pFractionalPart;
	private final ExponentPartElements pExponentPart;
	private final ExponentIndicatorElements pExponentIndicator;
	private final SignElements pSign;
	private final StringValueElements pStringValue;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GraphqlidlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGraphqlSchema = new GraphqlSchemaElements();
		this.pGraphqlSchemaDefinition = new GraphqlSchemaDefinitionElements();
		this.pGraphqlRootQuery = new GraphqlRootQueryElements();
		this.pGraphqlTypeDefinition = new GraphqlTypeDefinitionElements();
		this.pGraphqlObjectTypeDefinition = new GraphqlObjectTypeDefinitionElements();
		this.pGraphqlInterfaceTypeDefinition = new GraphqlInterfaceTypeDefinitionElements();
		this.pGraphqlScalarTypeDefinition = new GraphqlScalarTypeDefinitionElements();
		this.pGraphqlEmunTypeDefinition = new GraphqlEmunTypeDefinitionElements();
		this.pGraphqlUnionTypeDefinition = new GraphqlUnionTypeDefinitionElements();
		this.pGraphqlInputTypeDefinition = new GraphqlInputTypeDefinitionElements();
		this.pGraphqlInputField = new GraphqlInputFieldElements();
		this.pGraphqlField = new GraphqlFieldElements();
		this.pGraphqlType = new GraphqlTypeElements();
		this.pGraphqlNamedType = new GraphqlNamedTypeElements();
		this.pGraphqlListType = new GraphqlListTypeElements();
		this.pGraphqlInputType = new GraphqlInputTypeElements();
		this.pGraphqlListInputType = new GraphqlListInputTypeElements();
		this.pArgument = new ArgumentElements();
		this.pGraphqlValue = new GraphqlValueElements();
		this.pSingleValue = new SingleValueElements();
		this.pComplexValue = new ComplexValueElements();
		this.pEnumValue = new EnumValueElements();
		this.pListValue = new ListValueElements();
		this.pObjectValue = new ObjectValueElements();
		this.pObjectField = new ObjectFieldElements();
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.COMMA");
		this.tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.COMMENT");
		this.tBOOLEANVALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.BOOLEANVALUE");
		this.tNULLVALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.NULLVALUE");
		this.tNONZERODIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.NONZERODIGIT");
		this.tSCALAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.SCALAR");
		this.tENUM_VALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.ENUM_VALUE");
		this.tNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "oda.graphql.language.Graphqlidl.NAME");
		this.pIntValue = new IntValueElements();
		this.pIntegerPart = new IntegerPartElements();
		this.pNegativeSign = new NegativeSignElements();
		this.pFloatValue = new FloatValueElements();
		this.pFractionalPart = new FractionalPartElements();
		this.pExponentPart = new ExponentPartElements();
		this.pExponentIndicator = new ExponentIndicatorElements();
		this.pSign = new SignElements();
		this.pStringValue = new StringValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("oda.graphql.language.Graphqlidl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GraphqlSchema:
	//	schema=GraphqlSchemaDefinition & types+=GraphqlTypeDefinition*;
	public GraphqlSchemaElements getGraphqlSchemaAccess() {
		return pGraphqlSchema;
	}
	
	public ParserRule getGraphqlSchemaRule() {
		return getGraphqlSchemaAccess().getRule();
	}
	
	//GraphqlSchemaDefinition:
	//	name='schema' '{'
	//	rootQuery=GraphqlRootQuery ('mutation' ':' mutation=[GraphqlObjectTypeDefinition|NAME])? ('subscription' ':'
	//	subcription=[GraphqlObjectTypeDefinition|NAME])?
	//	'}';
	public GraphqlSchemaDefinitionElements getGraphqlSchemaDefinitionAccess() {
		return pGraphqlSchemaDefinition;
	}
	
	public ParserRule getGraphqlSchemaDefinitionRule() {
		return getGraphqlSchemaDefinitionAccess().getRule();
	}
	
	//GraphqlRootQuery:
	//	name='query' ':' query=[GraphqlObjectTypeDefinition|NAME];
	public GraphqlRootQueryElements getGraphqlRootQueryAccess() {
		return pGraphqlRootQuery;
	}
	
	public ParserRule getGraphqlRootQueryRule() {
		return getGraphqlRootQueryAccess().getRule();
	}
	
	//GraphqlTypeDefinition:
	//	GraphqlObjectTypeDefinition | GraphqlScalarTypeDefinition | GraphqlInterfaceTypeDefinition |
	//	GraphqlUnionTypeDefinition | GraphqlEmunTypeDefinition | GraphqlInputTypeDefinition;
	public GraphqlTypeDefinitionElements getGraphqlTypeDefinitionAccess() {
		return pGraphqlTypeDefinition;
	}
	
	public ParserRule getGraphqlTypeDefinitionRule() {
		return getGraphqlTypeDefinitionAccess().getRule();
	}
	
	//GraphqlObjectTypeDefinition:
	//	'type' name=NAME ('implements' interfaces+=[GraphqlInterfaceTypeDefinition|NAME]+)? '{' fields+=GraphqlField+ '}';
	public GraphqlObjectTypeDefinitionElements getGraphqlObjectTypeDefinitionAccess() {
		return pGraphqlObjectTypeDefinition;
	}
	
	public ParserRule getGraphqlObjectTypeDefinitionRule() {
		return getGraphqlObjectTypeDefinitionAccess().getRule();
	}
	
	//GraphqlInterfaceTypeDefinition:
	//	'interface' name=NAME '{' fields+=GraphqlField+ '}';
	public GraphqlInterfaceTypeDefinitionElements getGraphqlInterfaceTypeDefinitionAccess() {
		return pGraphqlInterfaceTypeDefinition;
	}
	
	public ParserRule getGraphqlInterfaceTypeDefinitionRule() {
		return getGraphqlInterfaceTypeDefinitionAccess().getRule();
	}
	
	//GraphqlScalarTypeDefinition:
	//	'scalar' name=NAME;
	public GraphqlScalarTypeDefinitionElements getGraphqlScalarTypeDefinitionAccess() {
		return pGraphqlScalarTypeDefinition;
	}
	
	public ParserRule getGraphqlScalarTypeDefinitionRule() {
		return getGraphqlScalarTypeDefinitionAccess().getRule();
	}
	
	//GraphqlEmunTypeDefinition:
	//	'enum' name=NAME '{' values+=EnumValue+ '}';
	public GraphqlEmunTypeDefinitionElements getGraphqlEmunTypeDefinitionAccess() {
		return pGraphqlEmunTypeDefinition;
	}
	
	public ParserRule getGraphqlEmunTypeDefinitionRule() {
		return getGraphqlEmunTypeDefinitionAccess().getRule();
	}
	
	//GraphqlUnionTypeDefinition:
	//	'union' name=NAME '=' members+=[GraphqlObjectTypeDefinition|NAME] ('|' members+=[GraphqlObjectTypeDefinition|NAME])*;
	public GraphqlUnionTypeDefinitionElements getGraphqlUnionTypeDefinitionAccess() {
		return pGraphqlUnionTypeDefinition;
	}
	
	public ParserRule getGraphqlUnionTypeDefinitionRule() {
		return getGraphqlUnionTypeDefinitionAccess().getRule();
	}
	
	//GraphqlInputTypeDefinition:
	//	'input' name=NAME '{' fields+=GraphqlInputField+ '}';
	public GraphqlInputTypeDefinitionElements getGraphqlInputTypeDefinitionAccess() {
		return pGraphqlInputTypeDefinition;
	}
	
	public ParserRule getGraphqlInputTypeDefinitionRule() {
		return getGraphqlInputTypeDefinitionAccess().getRule();
	}
	
	//GraphqlInputField:
	//	name=NAME ':' type=GraphqlInputType;
	public GraphqlInputFieldElements getGraphqlInputFieldAccess() {
		return pGraphqlInputField;
	}
	
	public ParserRule getGraphqlInputFieldRule() {
		return getGraphqlInputFieldAccess().getRule();
	}
	
	//GraphqlField:
	//	name=NAME ('(' args+=Argument ')')* ':' type=GraphqlType;
	public GraphqlFieldElements getGraphqlFieldAccess() {
		return pGraphqlField;
	}
	
	public ParserRule getGraphqlFieldRule() {
		return getGraphqlFieldAccess().getRule();
	}
	
	//GraphqlType:
	//	dtype=[GraphqlTypeDefinition|NAME] nonNull?='!'? | ntype=GraphqlNamedType nonNull?='!'? | ltype=GraphqlListType
	//	nonNull?='!'?;
	public GraphqlTypeElements getGraphqlTypeAccess() {
		return pGraphqlType;
	}
	
	public ParserRule getGraphqlTypeRule() {
		return getGraphqlTypeAccess().getRule();
	}
	
	//GraphqlNamedType:
	//	name=SCALAR;
	public GraphqlNamedTypeElements getGraphqlNamedTypeAccess() {
		return pGraphqlNamedType;
	}
	
	public ParserRule getGraphqlNamedTypeRule() {
		return getGraphqlNamedTypeAccess().getRule();
	}
	
	//GraphqlListType:
	//	'[' GraphqlType ']';
	public GraphqlListTypeElements getGraphqlListTypeAccess() {
		return pGraphqlListType;
	}
	
	public ParserRule getGraphqlListTypeRule() {
		return getGraphqlListTypeAccess().getRule();
	}
	
	////The fields on an input object type can themselves refer to input object types, but you can't mix input and output types in your schema
	//GraphqlInputType:
	//	dtype=[GraphqlInputTypeDefinition|NAME] nonNull?='!'? | ntype=GraphqlNamedType nonNull?='!'? |
	//	ltype=GraphqlListInputType nonNull?='!'?;
	public GraphqlInputTypeElements getGraphqlInputTypeAccess() {
		return pGraphqlInputType;
	}
	
	public ParserRule getGraphqlInputTypeRule() {
		return getGraphqlInputTypeAccess().getRule();
	}
	
	//GraphqlListInputType:
	//	'[' GraphqlInputType ']';
	public GraphqlListInputTypeElements getGraphqlListInputTypeAccess() {
		return pGraphqlListInputType;
	}
	
	public ParserRule getGraphqlListInputTypeRule() {
		return getGraphqlListInputTypeAccess().getRule();
	}
	
	//Argument:
	//	name=NAME ':' type=GraphqlType ('=' defValue=GraphqlValue)?;
	public ArgumentElements getArgumentAccess() {
		return pArgument;
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}
	
	////DefaultValue:
	////	Value 
	////;
	//GraphqlValue:
	//	sv=SingleValue | ev=[EnumValue|NAME] | cv=ComplexValue //condition added to solve different returned types for value attr
	//;
	public GraphqlValueElements getGraphqlValueAccess() {
		return pGraphqlValue;
	}
	
	public ParserRule getGraphqlValueRule() {
		return getGraphqlValueAccess().getRule();
	}
	
	//SingleValue:
	//	value=IntValue | value=FloatValue | value=StringValue | value=BOOLEANVALUE | value=NULLVALUE;
	public SingleValueElements getSingleValueAccess() {
		return pSingleValue;
	}
	
	public ParserRule getSingleValueRule() {
		return getSingleValueAccess().getRule();
	}
	
	//ComplexValue:
	//	value=ListValue | value=ObjectValue;
	public ComplexValueElements getComplexValueAccess() {
		return pComplexValue;
	}
	
	public ParserRule getComplexValueRule() {
		return getComplexValueAccess().getRule();
	}
	
	//EnumValue:
	//	{EnumValue} name=ENUM_VALUE;
	public EnumValueElements getEnumValueAccess() {
		return pEnumValue;
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}
	
	//ListValue:
	//	{ListValue} '[' values+=GraphqlValue* ']';
	public ListValueElements getListValueAccess() {
		return pListValue;
	}
	
	public ParserRule getListValueRule() {
		return getListValueAccess().getRule();
	}
	
	//ObjectValue:
	//	{ObjectValue} '{' fields+=ObjectField* '}';
	public ObjectValueElements getObjectValueAccess() {
		return pObjectValue;
	}
	
	public ParserRule getObjectValueRule() {
		return getObjectValueAccess().getRule();
	}
	
	//ObjectField:
	//	name=NAME ':' value=GraphqlValue;
	public ObjectFieldElements getObjectFieldAccess() {
		return pObjectField;
	}
	
	public ParserRule getObjectFieldRule() {
		return getObjectFieldAccess().getRule();
	}
	
	//terminal COMMA:
	//	',';
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	}
	
	//terminal COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getCOMMENTRule() {
		return tCOMMENT;
	}
	
	//terminal BOOLEANVALUE:
	//	'true' | 'false';
	public TerminalRule getBOOLEANVALUERule() {
		return tBOOLEANVALUE;
	}
	
	//terminal NULLVALUE:
	//	'null';
	public TerminalRule getNULLVALUERule() {
		return tNULLVALUE;
	}
	
	//terminal NONZERODIGIT:
	//	'1'..'9';
	public TerminalRule getNONZERODIGITRule() {
		return tNONZERODIGIT;
	}
	
	//terminal SCALAR:
	//	'Int' | 'Float' | 'String' | 'Boolean' | 'ID';
	public TerminalRule getSCALARRule() {
		return tSCALAR;
	}
	
	//terminal ENUM_VALUE:
	//	('A'..'Z' | '_') ('A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getENUM_VALUERule() {
		return tENUM_VALUE;
	}
	
	//terminal NAME:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getNAMERule() {
		return tNAME;
	}
	
	//IntValue:
	//	IntegerPart;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//IntegerPart:
	//	NegativeSign? '0' | NegativeSign? NONZERODIGIT INT;
	public IntegerPartElements getIntegerPartAccess() {
		return pIntegerPart;
	}
	
	public ParserRule getIntegerPartRule() {
		return getIntegerPartAccess().getRule();
	}
	
	//NegativeSign:
	//	'-';
	public NegativeSignElements getNegativeSignAccess() {
		return pNegativeSign;
	}
	
	public ParserRule getNegativeSignRule() {
		return getNegativeSignAccess().getRule();
	}
	
	//FloatValue:
	//	IntegerPart FractionalPart | IntegerPart ExponentPart | IntegerPart FractionalPart ExponentPart;
	public FloatValueElements getFloatValueAccess() {
		return pFloatValue;
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//FractionalPart:
	//	'.' INT;
	public FractionalPartElements getFractionalPartAccess() {
		return pFractionalPart;
	}
	
	public ParserRule getFractionalPartRule() {
		return getFractionalPartAccess().getRule();
	}
	
	//ExponentPart:
	//	ExponentIndicator Sign? INT;
	public ExponentPartElements getExponentPartAccess() {
		return pExponentPart;
	}
	
	public ParserRule getExponentPartRule() {
		return getExponentPartAccess().getRule();
	}
	
	//ExponentIndicator: //TODO: could be enum rule but then ExponentPart should assign the returned value
	//	'e' | 'E';
	public ExponentIndicatorElements getExponentIndicatorAccess() {
		return pExponentIndicator;
	}
	
	public ParserRule getExponentIndicatorRule() {
		return getExponentIndicatorAccess().getRule();
	}
	
	//Sign: //TODO: could be enum rule but then ExponentPart should assign the returned value
	//	'+' | '-';
	public SignElements getSignAccess() {
		return pSign;
	}
	
	public ParserRule getSignRule() {
		return getSignAccess().getRule();
	}
	
	//StringValue:
	//	'"' '"' |
	//	'"' STRING '"';
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
